/*
 * Crop Health API
 * This is a RESTful service that provides predictions for crop health.<br/>The API consists of three pre-trained PyTorch models served using TorchServe. The models are designed to predict the health of crops based on images of the crops. The models were trained on the following crop types: maize, beans, cocoa, cassava, and banana.<br/>The data were collected from the <a href='https://dataverse.harvard.edu'>Harvard Dataverse</a> and are licensed under the <a href='https://creativecommons.org/publicdomain/zero/1.0/'>Creative Commons 1.0 DEED license.</a><br/>The models differ in the number of classes they predict. The models are:<br/>1. Binary model: This is a binary model that predicts the health of crops into three classes: healthy and diseased.<br/>2. Single-HLT model: This is a multiclass model that predicts the health of crops into a single healthy (HLT) class and several diseases.<br/>3. Multi-HLT model: This is a multiclass model that predicts the health of crops into multiple healthy (HLT) classes and several diseases.<br/>The key difference between the single-HLT and multi-HLT models is that only the multi-HLT model has a healthy class for each crop type.<br/>The nine specific datasets used can be found at the following URLs:<br/>1. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/R0KL7R'>Spectrometry Cassava Dataset</a><br/>2. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/T4RB0B'>Cassava Dataset Uganda</a><br/>3. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/GDON8Q'>Maize Dataset Tanzania</a><br/>4. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/6R78HR'>Maize Dataset Namibia</a><br/>5. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/LPGHKK'>Maize Dataset Uganda</a><br/>6. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/TCKVEW'>Beans Dataset Uganda</a><br/>7. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/LQUWXW'>Bananas Dataset Tanzania</a><br/>8. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/BBGQSP'>KaraAgro AI Cocoa Dataset</a><br/>9. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/CXUMDS'>KaraAgro AI Maize Dataset</a>
 *
 * The version of the OpenAPI document: 0.1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.crop_health.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.crop_health.JSON;

/**
 * MultiHLTPredictionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-26T11:13:50.974079+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class MultiHLTPredictionResponse {
  public static final String SERIALIZED_NAME_HL_T_CASSAVA = "HLT_cassava";
  @SerializedName(SERIALIZED_NAME_HL_T_CASSAVA)
  private BigDecimal hlTCassava;

  public static final String SERIALIZED_NAME_CB_S_D_CASSAVA = "CBSD_cassava";
  @SerializedName(SERIALIZED_NAME_CB_S_D_CASSAVA)
  private BigDecimal cbSDCassava;

  public static final String SERIALIZED_NAME_CM_D_CASSAVA = "CMD_cassava";
  @SerializedName(SERIALIZED_NAME_CM_D_CASSAVA)
  private BigDecimal cmDCassava;

  public static final String SERIALIZED_NAME_ML_N_MAIZE = "MLN_maize";
  @SerializedName(SERIALIZED_NAME_ML_N_MAIZE)
  private BigDecimal mlNMaize;

  public static final String SERIALIZED_NAME_HL_T_MAIZE = "HLT_maize";
  @SerializedName(SERIALIZED_NAME_HL_T_MAIZE)
  private BigDecimal hlTMaize;

  public static final String SERIALIZED_NAME_MS_V_MAIZE = "MSV_maize";
  @SerializedName(SERIALIZED_NAME_MS_V_MAIZE)
  private BigDecimal msVMaize;

  public static final String SERIALIZED_NAME_FA_W_MAIZE = "FAW_maize";
  @SerializedName(SERIALIZED_NAME_FA_W_MAIZE)
  private BigDecimal faWMaize;

  public static final String SERIALIZED_NAME_ML_B_MAIZE = "MLB_maize";
  @SerializedName(SERIALIZED_NAME_ML_B_MAIZE)
  private BigDecimal mlBMaize;

  public static final String SERIALIZED_NAME_HL_T_BEANS = "HLT_beans";
  @SerializedName(SERIALIZED_NAME_HL_T_BEANS)
  private BigDecimal hlTBeans;

  public static final String SERIALIZED_NAME_BR_BEANS = "BR_beans";
  @SerializedName(SERIALIZED_NAME_BR_BEANS)
  private BigDecimal brBeans;

  public static final String SERIALIZED_NAME_AL_S_BEANS = "ALS_beans";
  @SerializedName(SERIALIZED_NAME_AL_S_BEANS)
  private BigDecimal alSBeans;

  public static final String SERIALIZED_NAME_HL_T_BANANAS = "HLT_bananas";
  @SerializedName(SERIALIZED_NAME_HL_T_BANANAS)
  private BigDecimal hlTBananas;

  public static final String SERIALIZED_NAME_BS_BANANAS = "BS_bananas";
  @SerializedName(SERIALIZED_NAME_BS_BANANAS)
  private BigDecimal bsBananas;

  public static final String SERIALIZED_NAME_FW_BANANAS = "FW_bananas";
  @SerializedName(SERIALIZED_NAME_FW_BANANAS)
  private BigDecimal fwBananas;

  public static final String SERIALIZED_NAME_HL_T_COCOA = "HLT_cocoa";
  @SerializedName(SERIALIZED_NAME_HL_T_COCOA)
  private BigDecimal hlTCocoa;

  public static final String SERIALIZED_NAME_AN_T_COCOA = "ANT_cocoa";
  @SerializedName(SERIALIZED_NAME_AN_T_COCOA)
  private BigDecimal anTCocoa;

  public static final String SERIALIZED_NAME_CS_S_V_D_COCOA = "CSSVD_cocoa";
  @SerializedName(SERIALIZED_NAME_CS_S_V_D_COCOA)
  private BigDecimal csSVDCocoa;

  public MultiHLTPredictionResponse() {
  }

  public MultiHLTPredictionResponse hlTCassava(BigDecimal hlTCassava) {
    this.hlTCassava = hlTCassava;
    return this;
  }

  /**
   * Healthy Cassava
   * @return hlTCassava
   */
  @javax.annotation.Nonnull
  public BigDecimal getHlTCassava() {
    return hlTCassava;
  }

  public void setHlTCassava(BigDecimal hlTCassava) {
    this.hlTCassava = hlTCassava;
  }


  public MultiHLTPredictionResponse cbSDCassava(BigDecimal cbSDCassava) {
    this.cbSDCassava = cbSDCassava;
    return this;
  }

  /**
   * Cassava Brown Streak Disease
   * @return cbSDCassava
   */
  @javax.annotation.Nonnull
  public BigDecimal getCbSDCassava() {
    return cbSDCassava;
  }

  public void setCbSDCassava(BigDecimal cbSDCassava) {
    this.cbSDCassava = cbSDCassava;
  }


  public MultiHLTPredictionResponse cmDCassava(BigDecimal cmDCassava) {
    this.cmDCassava = cmDCassava;
    return this;
  }

  /**
   * Cassava Mosaic Disease
   * @return cmDCassava
   */
  @javax.annotation.Nonnull
  public BigDecimal getCmDCassava() {
    return cmDCassava;
  }

  public void setCmDCassava(BigDecimal cmDCassava) {
    this.cmDCassava = cmDCassava;
  }


  public MultiHLTPredictionResponse mlNMaize(BigDecimal mlNMaize) {
    this.mlNMaize = mlNMaize;
    return this;
  }

  /**
   * Maize Lethal Necrosis
   * @return mlNMaize
   */
  @javax.annotation.Nonnull
  public BigDecimal getMlNMaize() {
    return mlNMaize;
  }

  public void setMlNMaize(BigDecimal mlNMaize) {
    this.mlNMaize = mlNMaize;
  }


  public MultiHLTPredictionResponse hlTMaize(BigDecimal hlTMaize) {
    this.hlTMaize = hlTMaize;
    return this;
  }

  /**
   * Healthy Maize
   * @return hlTMaize
   */
  @javax.annotation.Nonnull
  public BigDecimal getHlTMaize() {
    return hlTMaize;
  }

  public void setHlTMaize(BigDecimal hlTMaize) {
    this.hlTMaize = hlTMaize;
  }


  public MultiHLTPredictionResponse msVMaize(BigDecimal msVMaize) {
    this.msVMaize = msVMaize;
    return this;
  }

  /**
   * Maize Streak Virus
   * @return msVMaize
   */
  @javax.annotation.Nonnull
  public BigDecimal getMsVMaize() {
    return msVMaize;
  }

  public void setMsVMaize(BigDecimal msVMaize) {
    this.msVMaize = msVMaize;
  }


  public MultiHLTPredictionResponse faWMaize(BigDecimal faWMaize) {
    this.faWMaize = faWMaize;
    return this;
  }

  /**
   * Fall Armyworm
   * @return faWMaize
   */
  @javax.annotation.Nonnull
  public BigDecimal getFaWMaize() {
    return faWMaize;
  }

  public void setFaWMaize(BigDecimal faWMaize) {
    this.faWMaize = faWMaize;
  }


  public MultiHLTPredictionResponse mlBMaize(BigDecimal mlBMaize) {
    this.mlBMaize = mlBMaize;
    return this;
  }

  /**
   * Maize Leaf Blight
   * @return mlBMaize
   */
  @javax.annotation.Nonnull
  public BigDecimal getMlBMaize() {
    return mlBMaize;
  }

  public void setMlBMaize(BigDecimal mlBMaize) {
    this.mlBMaize = mlBMaize;
  }


  public MultiHLTPredictionResponse hlTBeans(BigDecimal hlTBeans) {
    this.hlTBeans = hlTBeans;
    return this;
  }

  /**
   * Healthy Beans
   * @return hlTBeans
   */
  @javax.annotation.Nonnull
  public BigDecimal getHlTBeans() {
    return hlTBeans;
  }

  public void setHlTBeans(BigDecimal hlTBeans) {
    this.hlTBeans = hlTBeans;
  }


  public MultiHLTPredictionResponse brBeans(BigDecimal brBeans) {
    this.brBeans = brBeans;
    return this;
  }

  /**
   * Bean Rust
   * @return brBeans
   */
  @javax.annotation.Nonnull
  public BigDecimal getBrBeans() {
    return brBeans;
  }

  public void setBrBeans(BigDecimal brBeans) {
    this.brBeans = brBeans;
  }


  public MultiHLTPredictionResponse alSBeans(BigDecimal alSBeans) {
    this.alSBeans = alSBeans;
    return this;
  }

  /**
   * Angular Leaf Spot
   * @return alSBeans
   */
  @javax.annotation.Nonnull
  public BigDecimal getAlSBeans() {
    return alSBeans;
  }

  public void setAlSBeans(BigDecimal alSBeans) {
    this.alSBeans = alSBeans;
  }


  public MultiHLTPredictionResponse hlTBananas(BigDecimal hlTBananas) {
    this.hlTBananas = hlTBananas;
    return this;
  }

  /**
   * Healthy Bananas
   * @return hlTBananas
   */
  @javax.annotation.Nonnull
  public BigDecimal getHlTBananas() {
    return hlTBananas;
  }

  public void setHlTBananas(BigDecimal hlTBananas) {
    this.hlTBananas = hlTBananas;
  }


  public MultiHLTPredictionResponse bsBananas(BigDecimal bsBananas) {
    this.bsBananas = bsBananas;
    return this;
  }

  /**
   * Black Sigatoka
   * @return bsBananas
   */
  @javax.annotation.Nonnull
  public BigDecimal getBsBananas() {
    return bsBananas;
  }

  public void setBsBananas(BigDecimal bsBananas) {
    this.bsBananas = bsBananas;
  }


  public MultiHLTPredictionResponse fwBananas(BigDecimal fwBananas) {
    this.fwBananas = fwBananas;
    return this;
  }

  /**
   * Fusarium Wilt Race 1
   * @return fwBananas
   */
  @javax.annotation.Nonnull
  public BigDecimal getFwBananas() {
    return fwBananas;
  }

  public void setFwBananas(BigDecimal fwBananas) {
    this.fwBananas = fwBananas;
  }


  public MultiHLTPredictionResponse hlTCocoa(BigDecimal hlTCocoa) {
    this.hlTCocoa = hlTCocoa;
    return this;
  }

  /**
   * Healthy Cocoa
   * @return hlTCocoa
   */
  @javax.annotation.Nonnull
  public BigDecimal getHlTCocoa() {
    return hlTCocoa;
  }

  public void setHlTCocoa(BigDecimal hlTCocoa) {
    this.hlTCocoa = hlTCocoa;
  }


  public MultiHLTPredictionResponse anTCocoa(BigDecimal anTCocoa) {
    this.anTCocoa = anTCocoa;
    return this;
  }

  /**
   * Anthracnose
   * @return anTCocoa
   */
  @javax.annotation.Nonnull
  public BigDecimal getAnTCocoa() {
    return anTCocoa;
  }

  public void setAnTCocoa(BigDecimal anTCocoa) {
    this.anTCocoa = anTCocoa;
  }


  public MultiHLTPredictionResponse csSVDCocoa(BigDecimal csSVDCocoa) {
    this.csSVDCocoa = csSVDCocoa;
    return this;
  }

  /**
   * Cocoa Swollen Shoot Virus Disease
   * @return csSVDCocoa
   */
  @javax.annotation.Nonnull
  public BigDecimal getCsSVDCocoa() {
    return csSVDCocoa;
  }

  public void setCsSVDCocoa(BigDecimal csSVDCocoa) {
    this.csSVDCocoa = csSVDCocoa;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiHLTPredictionResponse multiHLTPredictionResponse = (MultiHLTPredictionResponse) o;
    return Objects.equals(this.hlTCassava, multiHLTPredictionResponse.hlTCassava) &&
        Objects.equals(this.cbSDCassava, multiHLTPredictionResponse.cbSDCassava) &&
        Objects.equals(this.cmDCassava, multiHLTPredictionResponse.cmDCassava) &&
        Objects.equals(this.mlNMaize, multiHLTPredictionResponse.mlNMaize) &&
        Objects.equals(this.hlTMaize, multiHLTPredictionResponse.hlTMaize) &&
        Objects.equals(this.msVMaize, multiHLTPredictionResponse.msVMaize) &&
        Objects.equals(this.faWMaize, multiHLTPredictionResponse.faWMaize) &&
        Objects.equals(this.mlBMaize, multiHLTPredictionResponse.mlBMaize) &&
        Objects.equals(this.hlTBeans, multiHLTPredictionResponse.hlTBeans) &&
        Objects.equals(this.brBeans, multiHLTPredictionResponse.brBeans) &&
        Objects.equals(this.alSBeans, multiHLTPredictionResponse.alSBeans) &&
        Objects.equals(this.hlTBananas, multiHLTPredictionResponse.hlTBananas) &&
        Objects.equals(this.bsBananas, multiHLTPredictionResponse.bsBananas) &&
        Objects.equals(this.fwBananas, multiHLTPredictionResponse.fwBananas) &&
        Objects.equals(this.hlTCocoa, multiHLTPredictionResponse.hlTCocoa) &&
        Objects.equals(this.anTCocoa, multiHLTPredictionResponse.anTCocoa) &&
        Objects.equals(this.csSVDCocoa, multiHLTPredictionResponse.csSVDCocoa);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hlTCassava, cbSDCassava, cmDCassava, mlNMaize, hlTMaize, msVMaize, faWMaize, mlBMaize, hlTBeans, brBeans, alSBeans, hlTBananas, bsBananas, fwBananas, hlTCocoa, anTCocoa, csSVDCocoa);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiHLTPredictionResponse {\n");
    sb.append("    hlTCassava: ").append(toIndentedString(hlTCassava)).append("\n");
    sb.append("    cbSDCassava: ").append(toIndentedString(cbSDCassava)).append("\n");
    sb.append("    cmDCassava: ").append(toIndentedString(cmDCassava)).append("\n");
    sb.append("    mlNMaize: ").append(toIndentedString(mlNMaize)).append("\n");
    sb.append("    hlTMaize: ").append(toIndentedString(hlTMaize)).append("\n");
    sb.append("    msVMaize: ").append(toIndentedString(msVMaize)).append("\n");
    sb.append("    faWMaize: ").append(toIndentedString(faWMaize)).append("\n");
    sb.append("    mlBMaize: ").append(toIndentedString(mlBMaize)).append("\n");
    sb.append("    hlTBeans: ").append(toIndentedString(hlTBeans)).append("\n");
    sb.append("    brBeans: ").append(toIndentedString(brBeans)).append("\n");
    sb.append("    alSBeans: ").append(toIndentedString(alSBeans)).append("\n");
    sb.append("    hlTBananas: ").append(toIndentedString(hlTBananas)).append("\n");
    sb.append("    bsBananas: ").append(toIndentedString(bsBananas)).append("\n");
    sb.append("    fwBananas: ").append(toIndentedString(fwBananas)).append("\n");
    sb.append("    hlTCocoa: ").append(toIndentedString(hlTCocoa)).append("\n");
    sb.append("    anTCocoa: ").append(toIndentedString(anTCocoa)).append("\n");
    sb.append("    csSVDCocoa: ").append(toIndentedString(csSVDCocoa)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HLT_cassava");
    openapiFields.add("CBSD_cassava");
    openapiFields.add("CMD_cassava");
    openapiFields.add("MLN_maize");
    openapiFields.add("HLT_maize");
    openapiFields.add("MSV_maize");
    openapiFields.add("FAW_maize");
    openapiFields.add("MLB_maize");
    openapiFields.add("HLT_beans");
    openapiFields.add("BR_beans");
    openapiFields.add("ALS_beans");
    openapiFields.add("HLT_bananas");
    openapiFields.add("BS_bananas");
    openapiFields.add("FW_bananas");
    openapiFields.add("HLT_cocoa");
    openapiFields.add("ANT_cocoa");
    openapiFields.add("CSSVD_cocoa");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HLT_cassava");
    openapiRequiredFields.add("CBSD_cassava");
    openapiRequiredFields.add("CMD_cassava");
    openapiRequiredFields.add("MLN_maize");
    openapiRequiredFields.add("HLT_maize");
    openapiRequiredFields.add("MSV_maize");
    openapiRequiredFields.add("FAW_maize");
    openapiRequiredFields.add("MLB_maize");
    openapiRequiredFields.add("HLT_beans");
    openapiRequiredFields.add("BR_beans");
    openapiRequiredFields.add("ALS_beans");
    openapiRequiredFields.add("HLT_bananas");
    openapiRequiredFields.add("BS_bananas");
    openapiRequiredFields.add("FW_bananas");
    openapiRequiredFields.add("HLT_cocoa");
    openapiRequiredFields.add("ANT_cocoa");
    openapiRequiredFields.add("CSSVD_cocoa");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiHLTPredictionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiHLTPredictionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiHLTPredictionResponse is not found in the empty JSON string", MultiHLTPredictionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiHLTPredictionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiHLTPredictionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MultiHLTPredictionResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiHLTPredictionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiHLTPredictionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiHLTPredictionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiHLTPredictionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiHLTPredictionResponse>() {
           @Override
           public void write(JsonWriter out, MultiHLTPredictionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiHLTPredictionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MultiHLTPredictionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiHLTPredictionResponse
   * @throws IOException if the JSON string is invalid with respect to MultiHLTPredictionResponse
   */
  public static MultiHLTPredictionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiHLTPredictionResponse.class);
  }

  /**
   * Convert an instance of MultiHLTPredictionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

