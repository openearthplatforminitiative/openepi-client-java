/*
 * Crop Health API
 * This is a RESTful service that provides predictions for crop health.<br/>The API consists of three pre-trained PyTorch models served using TorchServe. The models are designed to predict the health of crops based on images of the crops. The models were trained on the following crop types: maize, beans, cocoa, cassava, and banana.<br/>The data were collected from the <a href='https://dataverse.harvard.edu'>Harvard Dataverse</a> and are licensed under the <a href='https://creativecommons.org/publicdomain/zero/1.0/'>Creative Commons 1.0 DEED license.</a><br/>The models differ in the number of classes they predict. The models are:<br/>1. Binary model: This is a binary model that predicts the health of crops into three classes: healthy and diseased.<br/>2. Single-HLT model: This is a multiclass model that predicts the health of crops into a single healthy (HLT) class and several diseases.<br/>3. Multi-HLT model: This is a multiclass model that predicts the health of crops into multiple healthy (HLT) classes and several diseases.<br/>The key difference between the single-HLT and multi-HLT models is that only the multi-HLT model has a healthy class for each crop type.<br/>The nine specific datasets used can be found at the following URLs:<br/>1. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/R0KL7R'>Spectrometry Cassava Dataset</a><br/>2. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/T4RB0B'>Cassava Dataset Uganda</a><br/>3. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/GDON8Q'>Maize Dataset Tanzania</a><br/>4. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/6R78HR'>Maize Dataset Namibia</a><br/>5. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/LPGHKK'>Maize Dataset Uganda</a><br/>6. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/TCKVEW'>Beans Dataset Uganda</a><br/>7. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/LQUWXW'>Bananas Dataset Tanzania</a><br/>8. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/BBGQSP'>KaraAgro AI Cocoa Dataset</a><br/>9. <a href='https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/CXUMDS'>KaraAgro AI Maize Dataset</a>
 *
 * The version of the OpenAPI document: 0.1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.crop_health.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.crop_health.JSON;

/**
 * SingleHLTPredictionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-26T11:13:50.974079+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class SingleHLTPredictionResponse {
  public static final String SERIALIZED_NAME_H_L_T = "HLT";
  @SerializedName(SERIALIZED_NAME_H_L_T)
  private BigDecimal HLT;

  public static final String SERIALIZED_NAME_C_B_S_D = "CBSD";
  @SerializedName(SERIALIZED_NAME_C_B_S_D)
  private BigDecimal CBSD;

  public static final String SERIALIZED_NAME_C_M_D = "CMD";
  @SerializedName(SERIALIZED_NAME_C_M_D)
  private BigDecimal CMD;

  public static final String SERIALIZED_NAME_M_L_N = "MLN";
  @SerializedName(SERIALIZED_NAME_M_L_N)
  private BigDecimal MLN;

  public static final String SERIALIZED_NAME_M_S_V = "MSV";
  @SerializedName(SERIALIZED_NAME_M_S_V)
  private BigDecimal MSV;

  public static final String SERIALIZED_NAME_F_A_W = "FAW";
  @SerializedName(SERIALIZED_NAME_F_A_W)
  private BigDecimal FAW;

  public static final String SERIALIZED_NAME_M_L_B = "MLB";
  @SerializedName(SERIALIZED_NAME_M_L_B)
  private BigDecimal MLB;

  public static final String SERIALIZED_NAME_B_R = "BR";
  @SerializedName(SERIALIZED_NAME_B_R)
  private BigDecimal BR;

  public static final String SERIALIZED_NAME_A_L_S = "ALS";
  @SerializedName(SERIALIZED_NAME_A_L_S)
  private BigDecimal ALS;

  public static final String SERIALIZED_NAME_B_S = "BS";
  @SerializedName(SERIALIZED_NAME_B_S)
  private BigDecimal BS;

  public static final String SERIALIZED_NAME_F_W = "FW";
  @SerializedName(SERIALIZED_NAME_F_W)
  private BigDecimal FW;

  public static final String SERIALIZED_NAME_A_N_T = "ANT";
  @SerializedName(SERIALIZED_NAME_A_N_T)
  private BigDecimal ANT;

  public static final String SERIALIZED_NAME_C_S_S_V_D = "CSSVD";
  @SerializedName(SERIALIZED_NAME_C_S_S_V_D)
  private BigDecimal CSSVD;

  public SingleHLTPredictionResponse() {
  }

  public SingleHLTPredictionResponse HLT(BigDecimal HLT) {
    this.HLT = HLT;
    return this;
  }

  /**
   * Healthy
   * @return HLT
   */
  @javax.annotation.Nonnull
  public BigDecimal getHLT() {
    return HLT;
  }

  public void setHLT(BigDecimal HLT) {
    this.HLT = HLT;
  }


  public SingleHLTPredictionResponse CBSD(BigDecimal CBSD) {
    this.CBSD = CBSD;
    return this;
  }

  /**
   * Cassava Brown Streak Disease
   * @return CBSD
   */
  @javax.annotation.Nonnull
  public BigDecimal getCBSD() {
    return CBSD;
  }

  public void setCBSD(BigDecimal CBSD) {
    this.CBSD = CBSD;
  }


  public SingleHLTPredictionResponse CMD(BigDecimal CMD) {
    this.CMD = CMD;
    return this;
  }

  /**
   * Cassava Mosaic Disease
   * @return CMD
   */
  @javax.annotation.Nonnull
  public BigDecimal getCMD() {
    return CMD;
  }

  public void setCMD(BigDecimal CMD) {
    this.CMD = CMD;
  }


  public SingleHLTPredictionResponse MLN(BigDecimal MLN) {
    this.MLN = MLN;
    return this;
  }

  /**
   * Maize Lethal Necrosis
   * @return MLN
   */
  @javax.annotation.Nonnull
  public BigDecimal getMLN() {
    return MLN;
  }

  public void setMLN(BigDecimal MLN) {
    this.MLN = MLN;
  }


  public SingleHLTPredictionResponse MSV(BigDecimal MSV) {
    this.MSV = MSV;
    return this;
  }

  /**
   * Maize Streak Virus
   * @return MSV
   */
  @javax.annotation.Nonnull
  public BigDecimal getMSV() {
    return MSV;
  }

  public void setMSV(BigDecimal MSV) {
    this.MSV = MSV;
  }


  public SingleHLTPredictionResponse FAW(BigDecimal FAW) {
    this.FAW = FAW;
    return this;
  }

  /**
   * Fall Armyworm
   * @return FAW
   */
  @javax.annotation.Nonnull
  public BigDecimal getFAW() {
    return FAW;
  }

  public void setFAW(BigDecimal FAW) {
    this.FAW = FAW;
  }


  public SingleHLTPredictionResponse MLB(BigDecimal MLB) {
    this.MLB = MLB;
    return this;
  }

  /**
   * Maize Leaf Blight
   * @return MLB
   */
  @javax.annotation.Nonnull
  public BigDecimal getMLB() {
    return MLB;
  }

  public void setMLB(BigDecimal MLB) {
    this.MLB = MLB;
  }


  public SingleHLTPredictionResponse BR(BigDecimal BR) {
    this.BR = BR;
    return this;
  }

  /**
   * Bean Rust
   * @return BR
   */
  @javax.annotation.Nonnull
  public BigDecimal getBR() {
    return BR;
  }

  public void setBR(BigDecimal BR) {
    this.BR = BR;
  }


  public SingleHLTPredictionResponse ALS(BigDecimal ALS) {
    this.ALS = ALS;
    return this;
  }

  /**
   * Angular Leaf Spot
   * @return ALS
   */
  @javax.annotation.Nonnull
  public BigDecimal getALS() {
    return ALS;
  }

  public void setALS(BigDecimal ALS) {
    this.ALS = ALS;
  }


  public SingleHLTPredictionResponse BS(BigDecimal BS) {
    this.BS = BS;
    return this;
  }

  /**
   * Black Sigatoka
   * @return BS
   */
  @javax.annotation.Nonnull
  public BigDecimal getBS() {
    return BS;
  }

  public void setBS(BigDecimal BS) {
    this.BS = BS;
  }


  public SingleHLTPredictionResponse FW(BigDecimal FW) {
    this.FW = FW;
    return this;
  }

  /**
   * Fusarium Wilt Race 1
   * @return FW
   */
  @javax.annotation.Nonnull
  public BigDecimal getFW() {
    return FW;
  }

  public void setFW(BigDecimal FW) {
    this.FW = FW;
  }


  public SingleHLTPredictionResponse ANT(BigDecimal ANT) {
    this.ANT = ANT;
    return this;
  }

  /**
   * Anthracnose
   * @return ANT
   */
  @javax.annotation.Nonnull
  public BigDecimal getANT() {
    return ANT;
  }

  public void setANT(BigDecimal ANT) {
    this.ANT = ANT;
  }


  public SingleHLTPredictionResponse CSSVD(BigDecimal CSSVD) {
    this.CSSVD = CSSVD;
    return this;
  }

  /**
   * Cocoa Swollen Shoot Virus Disease
   * @return CSSVD
   */
  @javax.annotation.Nonnull
  public BigDecimal getCSSVD() {
    return CSSVD;
  }

  public void setCSSVD(BigDecimal CSSVD) {
    this.CSSVD = CSSVD;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleHLTPredictionResponse singleHLTPredictionResponse = (SingleHLTPredictionResponse) o;
    return Objects.equals(this.HLT, singleHLTPredictionResponse.HLT) &&
        Objects.equals(this.CBSD, singleHLTPredictionResponse.CBSD) &&
        Objects.equals(this.CMD, singleHLTPredictionResponse.CMD) &&
        Objects.equals(this.MLN, singleHLTPredictionResponse.MLN) &&
        Objects.equals(this.MSV, singleHLTPredictionResponse.MSV) &&
        Objects.equals(this.FAW, singleHLTPredictionResponse.FAW) &&
        Objects.equals(this.MLB, singleHLTPredictionResponse.MLB) &&
        Objects.equals(this.BR, singleHLTPredictionResponse.BR) &&
        Objects.equals(this.ALS, singleHLTPredictionResponse.ALS) &&
        Objects.equals(this.BS, singleHLTPredictionResponse.BS) &&
        Objects.equals(this.FW, singleHLTPredictionResponse.FW) &&
        Objects.equals(this.ANT, singleHLTPredictionResponse.ANT) &&
        Objects.equals(this.CSSVD, singleHLTPredictionResponse.CSSVD);
  }

  @Override
  public int hashCode() {
    return Objects.hash(HLT, CBSD, CMD, MLN, MSV, FAW, MLB, BR, ALS, BS, FW, ANT, CSSVD);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleHLTPredictionResponse {\n");
    sb.append("    HLT: ").append(toIndentedString(HLT)).append("\n");
    sb.append("    CBSD: ").append(toIndentedString(CBSD)).append("\n");
    sb.append("    CMD: ").append(toIndentedString(CMD)).append("\n");
    sb.append("    MLN: ").append(toIndentedString(MLN)).append("\n");
    sb.append("    MSV: ").append(toIndentedString(MSV)).append("\n");
    sb.append("    FAW: ").append(toIndentedString(FAW)).append("\n");
    sb.append("    MLB: ").append(toIndentedString(MLB)).append("\n");
    sb.append("    BR: ").append(toIndentedString(BR)).append("\n");
    sb.append("    ALS: ").append(toIndentedString(ALS)).append("\n");
    sb.append("    BS: ").append(toIndentedString(BS)).append("\n");
    sb.append("    FW: ").append(toIndentedString(FW)).append("\n");
    sb.append("    ANT: ").append(toIndentedString(ANT)).append("\n");
    sb.append("    CSSVD: ").append(toIndentedString(CSSVD)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HLT");
    openapiFields.add("CBSD");
    openapiFields.add("CMD");
    openapiFields.add("MLN");
    openapiFields.add("MSV");
    openapiFields.add("FAW");
    openapiFields.add("MLB");
    openapiFields.add("BR");
    openapiFields.add("ALS");
    openapiFields.add("BS");
    openapiFields.add("FW");
    openapiFields.add("ANT");
    openapiFields.add("CSSVD");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HLT");
    openapiRequiredFields.add("CBSD");
    openapiRequiredFields.add("CMD");
    openapiRequiredFields.add("MLN");
    openapiRequiredFields.add("MSV");
    openapiRequiredFields.add("FAW");
    openapiRequiredFields.add("MLB");
    openapiRequiredFields.add("BR");
    openapiRequiredFields.add("ALS");
    openapiRequiredFields.add("BS");
    openapiRequiredFields.add("FW");
    openapiRequiredFields.add("ANT");
    openapiRequiredFields.add("CSSVD");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SingleHLTPredictionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleHLTPredictionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleHLTPredictionResponse is not found in the empty JSON string", SingleHLTPredictionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleHLTPredictionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleHLTPredictionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SingleHLTPredictionResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleHLTPredictionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleHLTPredictionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleHLTPredictionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleHLTPredictionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleHLTPredictionResponse>() {
           @Override
           public void write(JsonWriter out, SingleHLTPredictionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleHLTPredictionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SingleHLTPredictionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SingleHLTPredictionResponse
   * @throws IOException if the JSON string is invalid with respect to SingleHLTPredictionResponse
   */
  public static SingleHLTPredictionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleHLTPredictionResponse.class);
  }

  /**
   * Convert an instance of SingleHLTPredictionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

