/*
 * Locationforecast
 * Weather forecast for a specified place
 *
 * The version of the OpenAPI document: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.weather.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.weather.JSON;

/**
 * Weather parameters valid for a specified time period.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-12T08:53:23.751911+02:00[Europe/Oslo]", comments = "Generator version: 7.13.0")
public class ForecastTimePeriod {
  public static final String SERIALIZED_NAME_AIR_TEMPERATURE_MAX = "air_temperature_max";
  @SerializedName(SERIALIZED_NAME_AIR_TEMPERATURE_MAX)
  @javax.annotation.Nullable
  private BigDecimal airTemperatureMax;

  public static final String SERIALIZED_NAME_AIR_TEMPERATURE_MIN = "air_temperature_min";
  @SerializedName(SERIALIZED_NAME_AIR_TEMPERATURE_MIN)
  @javax.annotation.Nullable
  private BigDecimal airTemperatureMin;

  public static final String SERIALIZED_NAME_AIR_TEMPERATURE_PERCENTILE_10 = "air_temperature_percentile_10";
  @SerializedName(SERIALIZED_NAME_AIR_TEMPERATURE_PERCENTILE_10)
  @javax.annotation.Nullable
  private BigDecimal airTemperaturePercentile10;

  public static final String SERIALIZED_NAME_AIR_TEMPERATURE_PERCENTILE_90 = "air_temperature_percentile_90";
  @SerializedName(SERIALIZED_NAME_AIR_TEMPERATURE_PERCENTILE_90)
  @javax.annotation.Nullable
  private BigDecimal airTemperaturePercentile90;

  public static final String SERIALIZED_NAME_PRECIPITATION_AMOUNT = "precipitation_amount";
  @SerializedName(SERIALIZED_NAME_PRECIPITATION_AMOUNT)
  @javax.annotation.Nullable
  private BigDecimal precipitationAmount;

  public static final String SERIALIZED_NAME_PRECIPITATION_AMOUNT_MAX = "precipitation_amount_max";
  @SerializedName(SERIALIZED_NAME_PRECIPITATION_AMOUNT_MAX)
  @javax.annotation.Nullable
  private BigDecimal precipitationAmountMax;

  public static final String SERIALIZED_NAME_PRECIPITATION_AMOUNT_MIN = "precipitation_amount_min";
  @SerializedName(SERIALIZED_NAME_PRECIPITATION_AMOUNT_MIN)
  @javax.annotation.Nullable
  private BigDecimal precipitationAmountMin;

  public static final String SERIALIZED_NAME_PROBABILITY_OF_PRECIPITATION = "probability_of_precipitation";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_OF_PRECIPITATION)
  @javax.annotation.Nullable
  private BigDecimal probabilityOfPrecipitation;

  public static final String SERIALIZED_NAME_PROBABILITY_OF_THUNDER = "probability_of_thunder";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_OF_THUNDER)
  @javax.annotation.Nullable
  private BigDecimal probabilityOfThunder;

  public static final String SERIALIZED_NAME_ULTRAVIOLET_INDEX_CLEAR_SKY = "ultraviolet_index_clear_sky";
  @SerializedName(SERIALIZED_NAME_ULTRAVIOLET_INDEX_CLEAR_SKY)
  @javax.annotation.Nullable
  private BigDecimal ultravioletIndexClearSky;

  public static final String SERIALIZED_NAME_ULTRAVIOLET_INDEX_CLEAR_SKY_MAX = "ultraviolet_index_clear_sky_max";
  @SerializedName(SERIALIZED_NAME_ULTRAVIOLET_INDEX_CLEAR_SKY_MAX)
  @javax.annotation.Nullable
  private BigDecimal ultravioletIndexClearSkyMax;

  public ForecastTimePeriod() {
  }

  public ForecastTimePeriod airTemperatureMax(@javax.annotation.Nullable BigDecimal airTemperatureMax) {
    this.airTemperatureMax = airTemperatureMax;
    return this;
  }

  /**
   * Maximum air temperature in period
   * @return airTemperatureMax
   */
  @javax.annotation.Nullable
  public BigDecimal getAirTemperatureMax() {
    return airTemperatureMax;
  }

  public void setAirTemperatureMax(@javax.annotation.Nullable BigDecimal airTemperatureMax) {
    this.airTemperatureMax = airTemperatureMax;
  }


  public ForecastTimePeriod airTemperatureMin(@javax.annotation.Nullable BigDecimal airTemperatureMin) {
    this.airTemperatureMin = airTemperatureMin;
    return this;
  }

  /**
   * Minimum air temperature in period
   * @return airTemperatureMin
   */
  @javax.annotation.Nullable
  public BigDecimal getAirTemperatureMin() {
    return airTemperatureMin;
  }

  public void setAirTemperatureMin(@javax.annotation.Nullable BigDecimal airTemperatureMin) {
    this.airTemperatureMin = airTemperatureMin;
  }


  public ForecastTimePeriod precipitationAmount(@javax.annotation.Nullable BigDecimal precipitationAmount) {
    this.precipitationAmount = precipitationAmount;
    return this;
  }

  /**
   * Best estimate for amount of precipitation for this period
   * @return precipitationAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getPrecipitationAmount() {
    return precipitationAmount;
  }

  public void setPrecipitationAmount(@javax.annotation.Nullable BigDecimal precipitationAmount) {
    this.precipitationAmount = precipitationAmount;
  }


  public ForecastTimePeriod precipitationAmountMax(@javax.annotation.Nullable BigDecimal precipitationAmountMax) {
    this.precipitationAmountMax = precipitationAmountMax;
    return this;
  }

  /**
   * Maximum amount of precipitation for this period
   * @return precipitationAmountMax
   */
  @javax.annotation.Nullable
  public BigDecimal getPrecipitationAmountMax() {
    return precipitationAmountMax;
  }

  public void setPrecipitationAmountMax(@javax.annotation.Nullable BigDecimal precipitationAmountMax) {
    this.precipitationAmountMax = precipitationAmountMax;
  }


  public ForecastTimePeriod precipitationAmountMin(@javax.annotation.Nullable BigDecimal precipitationAmountMin) {
    this.precipitationAmountMin = precipitationAmountMin;
    return this;
  }

  /**
   * Minimum amount of precipitation for this period
   * @return precipitationAmountMin
   */
  @javax.annotation.Nullable
  public BigDecimal getPrecipitationAmountMin() {
    return precipitationAmountMin;
  }

  public void setPrecipitationAmountMin(@javax.annotation.Nullable BigDecimal precipitationAmountMin) {
    this.precipitationAmountMin = precipitationAmountMin;
  }


  public ForecastTimePeriod probabilityOfPrecipitation(@javax.annotation.Nullable BigDecimal probabilityOfPrecipitation) {
    this.probabilityOfPrecipitation = probabilityOfPrecipitation;
    return this;
  }

  /**
   * Probability of any precipitation coming for this period
   * @return probabilityOfPrecipitation
   */
  @javax.annotation.Nullable
  public BigDecimal getProbabilityOfPrecipitation() {
    return probabilityOfPrecipitation;
  }

  public void setProbabilityOfPrecipitation(@javax.annotation.Nullable BigDecimal probabilityOfPrecipitation) {
    this.probabilityOfPrecipitation = probabilityOfPrecipitation;
  }


  public ForecastTimePeriod probabilityOfThunder(@javax.annotation.Nullable BigDecimal probabilityOfThunder) {
    this.probabilityOfThunder = probabilityOfThunder;
    return this;
  }

  /**
   * Probability of any thunder coming for this period
   * @return probabilityOfThunder
   */
  @javax.annotation.Nullable
  public BigDecimal getProbabilityOfThunder() {
    return probabilityOfThunder;
  }

  public void setProbabilityOfThunder(@javax.annotation.Nullable BigDecimal probabilityOfThunder) {
    this.probabilityOfThunder = probabilityOfThunder;
  }


  public ForecastTimePeriod ultravioletIndexClearSkyMax(@javax.annotation.Nullable BigDecimal ultravioletIndexClearSkyMax) {
    this.ultravioletIndexClearSkyMax = ultravioletIndexClearSkyMax;
    return this;
  }

  /**
   * Maximum ultraviolet index if sky is clear
   * @return ultravioletIndexClearSkyMax
   */
  @javax.annotation.Nullable
  public BigDecimal getUltravioletIndexClearSkyMax() {
    return ultravioletIndexClearSkyMax;
  }

  public void setUltravioletIndexClearSkyMax(@javax.annotation.Nullable BigDecimal ultravioletIndexClearSkyMax) {
    this.ultravioletIndexClearSkyMax = ultravioletIndexClearSkyMax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastTimePeriod forecastTimePeriod = (ForecastTimePeriod) o;
    return Objects.equals(this.airTemperatureMax, forecastTimePeriod.airTemperatureMax) &&
        Objects.equals(this.airTemperatureMin, forecastTimePeriod.airTemperatureMin) &&
        Objects.equals(this.precipitationAmount, forecastTimePeriod.precipitationAmount) &&
        Objects.equals(this.precipitationAmountMax, forecastTimePeriod.precipitationAmountMax) &&
        Objects.equals(this.precipitationAmountMin, forecastTimePeriod.precipitationAmountMin) &&
        Objects.equals(this.probabilityOfPrecipitation, forecastTimePeriod.probabilityOfPrecipitation) &&
        Objects.equals(this.probabilityOfThunder, forecastTimePeriod.probabilityOfThunder) &&
        Objects.equals(this.ultravioletIndexClearSkyMax, forecastTimePeriod.ultravioletIndexClearSkyMax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airTemperatureMax, airTemperatureMin, precipitationAmount, precipitationAmountMax, precipitationAmountMin, probabilityOfPrecipitation, probabilityOfThunder, ultravioletIndexClearSkyMax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastTimePeriod {\n");
    sb.append("    airTemperatureMax: ").append(toIndentedString(airTemperatureMax)).append("\n");
    sb.append("    airTemperatureMin: ").append(toIndentedString(airTemperatureMin)).append("\n");
    sb.append("    precipitationAmount: ").append(toIndentedString(precipitationAmount)).append("\n");
    sb.append("    precipitationAmountMax: ").append(toIndentedString(precipitationAmountMax)).append("\n");
    sb.append("    precipitationAmountMin: ").append(toIndentedString(precipitationAmountMin)).append("\n");
    sb.append("    probabilityOfPrecipitation: ").append(toIndentedString(probabilityOfPrecipitation)).append("\n");
    sb.append("    probabilityOfThunder: ").append(toIndentedString(probabilityOfThunder)).append("\n");
    sb.append("    ultravioletIndexClearSkyMax: ").append(toIndentedString(ultravioletIndexClearSkyMax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("air_temperature_max");
    openapiFields.add("air_temperature_min");
    openapiFields.add("air_temperature_percentile_10");
    openapiFields.add("air_temperature_percentile_90");
    openapiFields.add("precipitation_amount");
    openapiFields.add("precipitation_amount_max");
    openapiFields.add("precipitation_amount_min");
    openapiFields.add("probability_of_precipitation");
    openapiFields.add("probability_of_thunder");
    openapiFields.add("ultraviolet_index_clear_sky");
    openapiFields.add("ultraviolet_index_clear_sky_max");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForecastTimePeriod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForecastTimePeriod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForecastTimePeriod is not found in the empty JSON string", ForecastTimePeriod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForecastTimePeriod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForecastTimePeriod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForecastTimePeriod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForecastTimePeriod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForecastTimePeriod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForecastTimePeriod.class));

       return (TypeAdapter<T>) new TypeAdapter<ForecastTimePeriod>() {
           @Override
           public void write(JsonWriter out, ForecastTimePeriod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForecastTimePeriod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForecastTimePeriod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForecastTimePeriod
   * @throws IOException if the JSON string is invalid with respect to ForecastTimePeriod
   */
  public static ForecastTimePeriod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForecastTimePeriod.class);
  }

  /**
   * Convert an instance of ForecastTimePeriod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

