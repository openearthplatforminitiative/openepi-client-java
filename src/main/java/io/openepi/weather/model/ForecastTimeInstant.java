/*
 * Locationforecast
 * Weather forecast for a specified place
 *
 * The version of the OpenAPI document: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.weather.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.weather.JSON;

/**
 * Weather parameters valid for a specific point in time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-12T08:53:23.751911+02:00[Europe/Oslo]", comments = "Generator version: 7.13.0")
public class ForecastTimeInstant {
  public static final String SERIALIZED_NAME_AIR_PRESSURE_AT_SEA_LEVEL = "air_pressure_at_sea_level";
  @SerializedName(SERIALIZED_NAME_AIR_PRESSURE_AT_SEA_LEVEL)
  @javax.annotation.Nullable
  private BigDecimal airPressureAtSeaLevel;

  public static final String SERIALIZED_NAME_AIR_TEMPERATURE = "air_temperature";
  @SerializedName(SERIALIZED_NAME_AIR_TEMPERATURE)
  @javax.annotation.Nullable
  private BigDecimal airTemperature;

  public static final String SERIALIZED_NAME_AIR_TEMPERATURE_PERCENTILE_10 = "air_temperature_percentile_10";
  @SerializedName(SERIALIZED_NAME_AIR_TEMPERATURE_PERCENTILE_10)
  @javax.annotation.Nullable
  private BigDecimal airTemperaturePercentile10;

  public static final String SERIALIZED_NAME_AIR_TEMPERATURE_PERCENTILE_90 = "air_temperature_percentile_90";
  @SerializedName(SERIALIZED_NAME_AIR_TEMPERATURE_PERCENTILE_90)
  @javax.annotation.Nullable
  private BigDecimal airTemperaturePercentile90;

  public static final String SERIALIZED_NAME_CLOUD_AREA_FRACTION = "cloud_area_fraction";
  @SerializedName(SERIALIZED_NAME_CLOUD_AREA_FRACTION)
  @javax.annotation.Nullable
  private BigDecimal cloudAreaFraction;

  public static final String SERIALIZED_NAME_CLOUD_AREA_FRACTION_HIGH = "cloud_area_fraction_high";
  @SerializedName(SERIALIZED_NAME_CLOUD_AREA_FRACTION_HIGH)
  @javax.annotation.Nullable
  private BigDecimal cloudAreaFractionHigh;

  public static final String SERIALIZED_NAME_CLOUD_AREA_FRACTION_LOW = "cloud_area_fraction_low";
  @SerializedName(SERIALIZED_NAME_CLOUD_AREA_FRACTION_LOW)
  @javax.annotation.Nullable
  private BigDecimal cloudAreaFractionLow;

  public static final String SERIALIZED_NAME_CLOUD_AREA_FRACTION_MEDIUM = "cloud_area_fraction_medium";
  @SerializedName(SERIALIZED_NAME_CLOUD_AREA_FRACTION_MEDIUM)
  @javax.annotation.Nullable
  private BigDecimal cloudAreaFractionMedium;

  public static final String SERIALIZED_NAME_DEW_POINT_TEMPERATURE = "dew_point_temperature";
  @SerializedName(SERIALIZED_NAME_DEW_POINT_TEMPERATURE)
  @javax.annotation.Nullable
  private BigDecimal dewPointTemperature;

  public static final String SERIALIZED_NAME_FOG_AREA_FRACTION = "fog_area_fraction";
  @SerializedName(SERIALIZED_NAME_FOG_AREA_FRACTION)
  @javax.annotation.Nullable
  private BigDecimal fogAreaFraction;

  public static final String SERIALIZED_NAME_RELATIVE_HUMIDITY = "relative_humidity";
  @SerializedName(SERIALIZED_NAME_RELATIVE_HUMIDITY)
  @javax.annotation.Nullable
  private BigDecimal relativeHumidity;

  public static final String SERIALIZED_NAME_ULTRAVIOLET_INDEX_CLEAR_SKY = "ultraviolet_index_clear_sky";
  @SerializedName(SERIALIZED_NAME_ULTRAVIOLET_INDEX_CLEAR_SKY)
  @javax.annotation.Nullable
  private BigDecimal ultravioletIndexClearSky;

  public static final String SERIALIZED_NAME_WIND_FROM_DIRECTION = "wind_from_direction";
  @SerializedName(SERIALIZED_NAME_WIND_FROM_DIRECTION)
  @javax.annotation.Nullable
  private BigDecimal windFromDirection;

  public static final String SERIALIZED_NAME_WIND_SPEED = "wind_speed";
  @SerializedName(SERIALIZED_NAME_WIND_SPEED)
  @javax.annotation.Nullable
  private BigDecimal windSpeed;

  public static final String SERIALIZED_NAME_WIND_SPEED_PERCENTILE_10 = "wind_speed_percentile_10";
  @SerializedName(SERIALIZED_NAME_WIND_SPEED_PERCENTILE_10)
  @javax.annotation.Nullable
  private BigDecimal windSpeedPercentile10;

  public static final String SERIALIZED_NAME_WIND_SPEED_PERCENTILE_90 = "wind_speed_percentile_90";
  @SerializedName(SERIALIZED_NAME_WIND_SPEED_PERCENTILE_90)
  @javax.annotation.Nullable
  private BigDecimal windSpeedPercentile90;

  public static final String SERIALIZED_NAME_WIND_SPEED_OF_GUST = "wind_speed_of_gust";
  @SerializedName(SERIALIZED_NAME_WIND_SPEED_OF_GUST)
  @javax.annotation.Nullable
  private BigDecimal windSpeedOfGust;

  public ForecastTimeInstant() {
  }

  public ForecastTimeInstant airPressureAtSeaLevel(@javax.annotation.Nullable BigDecimal airPressureAtSeaLevel) {
    this.airPressureAtSeaLevel = airPressureAtSeaLevel;
    return this;
  }

  /**
   * Air pressure at sea level
   * @return airPressureAtSeaLevel
   */
  @javax.annotation.Nullable
  public BigDecimal getAirPressureAtSeaLevel() {
    return airPressureAtSeaLevel;
  }

  public void setAirPressureAtSeaLevel(@javax.annotation.Nullable BigDecimal airPressureAtSeaLevel) {
    this.airPressureAtSeaLevel = airPressureAtSeaLevel;
  }


  public ForecastTimeInstant airTemperature(@javax.annotation.Nullable BigDecimal airTemperature) {
    this.airTemperature = airTemperature;
    return this;
  }

  /**
   * Air temperature
   * @return airTemperature
   */
  @javax.annotation.Nullable
  public BigDecimal getAirTemperature() {
    return airTemperature;
  }

  public void setAirTemperature(@javax.annotation.Nullable BigDecimal airTemperature) {
    this.airTemperature = airTemperature;
  }


  public ForecastTimeInstant cloudAreaFraction(@javax.annotation.Nullable BigDecimal cloudAreaFraction) {
    this.cloudAreaFraction = cloudAreaFraction;
    return this;
  }

  /**
   * Amount of sky covered by clouds.
   * @return cloudAreaFraction
   */
  @javax.annotation.Nullable
  public BigDecimal getCloudAreaFraction() {
    return cloudAreaFraction;
  }

  public void setCloudAreaFraction(@javax.annotation.Nullable BigDecimal cloudAreaFraction) {
    this.cloudAreaFraction = cloudAreaFraction;
  }


  public ForecastTimeInstant cloudAreaFractionHigh(@javax.annotation.Nullable BigDecimal cloudAreaFractionHigh) {
    this.cloudAreaFractionHigh = cloudAreaFractionHigh;
    return this;
  }

  /**
   * Amount of sky covered by clouds at high elevation.
   * @return cloudAreaFractionHigh
   */
  @javax.annotation.Nullable
  public BigDecimal getCloudAreaFractionHigh() {
    return cloudAreaFractionHigh;
  }

  public void setCloudAreaFractionHigh(@javax.annotation.Nullable BigDecimal cloudAreaFractionHigh) {
    this.cloudAreaFractionHigh = cloudAreaFractionHigh;
  }


  public ForecastTimeInstant cloudAreaFractionLow(@javax.annotation.Nullable BigDecimal cloudAreaFractionLow) {
    this.cloudAreaFractionLow = cloudAreaFractionLow;
    return this;
  }

  /**
   * Amount of sky covered by clouds at low elevation.
   * @return cloudAreaFractionLow
   */
  @javax.annotation.Nullable
  public BigDecimal getCloudAreaFractionLow() {
    return cloudAreaFractionLow;
  }

  public void setCloudAreaFractionLow(@javax.annotation.Nullable BigDecimal cloudAreaFractionLow) {
    this.cloudAreaFractionLow = cloudAreaFractionLow;
  }


  public ForecastTimeInstant cloudAreaFractionMedium(@javax.annotation.Nullable BigDecimal cloudAreaFractionMedium) {
    this.cloudAreaFractionMedium = cloudAreaFractionMedium;
    return this;
  }

  /**
   * Amount of sky covered by clouds at medium elevation.
   * @return cloudAreaFractionMedium
   */
  @javax.annotation.Nullable
  public BigDecimal getCloudAreaFractionMedium() {
    return cloudAreaFractionMedium;
  }

  public void setCloudAreaFractionMedium(@javax.annotation.Nullable BigDecimal cloudAreaFractionMedium) {
    this.cloudAreaFractionMedium = cloudAreaFractionMedium;
  }


  public ForecastTimeInstant dewPointTemperature(@javax.annotation.Nullable BigDecimal dewPointTemperature) {
    this.dewPointTemperature = dewPointTemperature;
    return this;
  }

  /**
   * Dew point temperature at sea level
   * @return dewPointTemperature
   */
  @javax.annotation.Nullable
  public BigDecimal getDewPointTemperature() {
    return dewPointTemperature;
  }

  public void setDewPointTemperature(@javax.annotation.Nullable BigDecimal dewPointTemperature) {
    this.dewPointTemperature = dewPointTemperature;
  }


  public ForecastTimeInstant fogAreaFraction(@javax.annotation.Nullable BigDecimal fogAreaFraction) {
    this.fogAreaFraction = fogAreaFraction;
    return this;
  }

  /**
   * Amount of area covered by fog.
   * @return fogAreaFraction
   */
  @javax.annotation.Nullable
  public BigDecimal getFogAreaFraction() {
    return fogAreaFraction;
  }

  public void setFogAreaFraction(@javax.annotation.Nullable BigDecimal fogAreaFraction) {
    this.fogAreaFraction = fogAreaFraction;
  }


  public ForecastTimeInstant relativeHumidity(@javax.annotation.Nullable BigDecimal relativeHumidity) {
    this.relativeHumidity = relativeHumidity;
    return this;
  }

  /**
   * Amount of humidity in the air.
   * @return relativeHumidity
   */
  @javax.annotation.Nullable
  public BigDecimal getRelativeHumidity() {
    return relativeHumidity;
  }

  public void setRelativeHumidity(@javax.annotation.Nullable BigDecimal relativeHumidity) {
    this.relativeHumidity = relativeHumidity;
  }


  public ForecastTimeInstant windFromDirection(@javax.annotation.Nullable BigDecimal windFromDirection) {
    this.windFromDirection = windFromDirection;
    return this;
  }

  /**
   * The direction wind is coming from, in degrees clockwise from North
   * @return windFromDirection
   */
  @javax.annotation.Nullable
  public BigDecimal getWindFromDirection() {
    return windFromDirection;
  }

  public void setWindFromDirection(@javax.annotation.Nullable BigDecimal windFromDirection) {
    this.windFromDirection = windFromDirection;
  }


  public ForecastTimeInstant windSpeed(@javax.annotation.Nullable BigDecimal windSpeed) {
    this.windSpeed = windSpeed;
    return this;
  }

  /**
   * Speed of wind
   * @return windSpeed
   */
  @javax.annotation.Nullable
  public BigDecimal getWindSpeed() {
    return windSpeed;
  }

  public void setWindSpeed(@javax.annotation.Nullable BigDecimal windSpeed) {
    this.windSpeed = windSpeed;
  }


  public ForecastTimeInstant windSpeedOfGust(@javax.annotation.Nullable BigDecimal windSpeedOfGust) {
    this.windSpeedOfGust = windSpeedOfGust;
    return this;
  }

  /**
   * Speed of wind gust
   * @return windSpeedOfGust
   */
  @javax.annotation.Nullable
  public BigDecimal getWindSpeedOfGust() {
    return windSpeedOfGust;
  }

  public void setWindSpeedOfGust(@javax.annotation.Nullable BigDecimal windSpeedOfGust) {
    this.windSpeedOfGust = windSpeedOfGust;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastTimeInstant forecastTimeInstant = (ForecastTimeInstant) o;
    return Objects.equals(this.airPressureAtSeaLevel, forecastTimeInstant.airPressureAtSeaLevel) &&
        Objects.equals(this.airTemperature, forecastTimeInstant.airTemperature) &&
        Objects.equals(this.cloudAreaFraction, forecastTimeInstant.cloudAreaFraction) &&
        Objects.equals(this.cloudAreaFractionHigh, forecastTimeInstant.cloudAreaFractionHigh) &&
        Objects.equals(this.cloudAreaFractionLow, forecastTimeInstant.cloudAreaFractionLow) &&
        Objects.equals(this.cloudAreaFractionMedium, forecastTimeInstant.cloudAreaFractionMedium) &&
        Objects.equals(this.dewPointTemperature, forecastTimeInstant.dewPointTemperature) &&
        Objects.equals(this.fogAreaFraction, forecastTimeInstant.fogAreaFraction) &&
        Objects.equals(this.relativeHumidity, forecastTimeInstant.relativeHumidity) &&
        Objects.equals(this.windFromDirection, forecastTimeInstant.windFromDirection) &&
        Objects.equals(this.windSpeed, forecastTimeInstant.windSpeed) &&
        Objects.equals(this.windSpeedOfGust, forecastTimeInstant.windSpeedOfGust);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airPressureAtSeaLevel, airTemperature, cloudAreaFraction, cloudAreaFractionHigh, cloudAreaFractionLow, cloudAreaFractionMedium, dewPointTemperature, fogAreaFraction, relativeHumidity, windFromDirection, windSpeed, windSpeedOfGust);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastTimeInstant {\n");
    sb.append("    airPressureAtSeaLevel: ").append(toIndentedString(airPressureAtSeaLevel)).append("\n");
    sb.append("    airTemperature: ").append(toIndentedString(airTemperature)).append("\n");
    sb.append("    cloudAreaFraction: ").append(toIndentedString(cloudAreaFraction)).append("\n");
    sb.append("    cloudAreaFractionHigh: ").append(toIndentedString(cloudAreaFractionHigh)).append("\n");
    sb.append("    cloudAreaFractionLow: ").append(toIndentedString(cloudAreaFractionLow)).append("\n");
    sb.append("    cloudAreaFractionMedium: ").append(toIndentedString(cloudAreaFractionMedium)).append("\n");
    sb.append("    dewPointTemperature: ").append(toIndentedString(dewPointTemperature)).append("\n");
    sb.append("    fogAreaFraction: ").append(toIndentedString(fogAreaFraction)).append("\n");
    sb.append("    relativeHumidity: ").append(toIndentedString(relativeHumidity)).append("\n");
    sb.append("    windFromDirection: ").append(toIndentedString(windFromDirection)).append("\n");
    sb.append("    windSpeed: ").append(toIndentedString(windSpeed)).append("\n");
    sb.append("    windSpeedOfGust: ").append(toIndentedString(windSpeedOfGust)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("air_pressure_at_sea_level");
    openapiFields.add("air_temperature");
    openapiFields.add("air_temperature_percentile_10");
    openapiFields.add("air_temperature_percentile_90");
    openapiFields.add("cloud_area_fraction");
    openapiFields.add("cloud_area_fraction_high");
    openapiFields.add("cloud_area_fraction_low");
    openapiFields.add("cloud_area_fraction_medium");
    openapiFields.add("dew_point_temperature");
    openapiFields.add("fog_area_fraction");
    openapiFields.add("relative_humidity");
    openapiFields.add("ultraviolet_index_clear_sky");
    openapiFields.add("wind_from_direction");
    openapiFields.add("wind_speed");
    openapiFields.add("wind_speed_percentile_10");
    openapiFields.add("wind_speed_percentile_90");
    openapiFields.add("wind_speed_of_gust");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForecastTimeInstant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForecastTimeInstant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForecastTimeInstant is not found in the empty JSON string", ForecastTimeInstant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForecastTimeInstant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForecastTimeInstant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForecastTimeInstant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForecastTimeInstant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForecastTimeInstant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForecastTimeInstant.class));

       return (TypeAdapter<T>) new TypeAdapter<ForecastTimeInstant>() {
           @Override
           public void write(JsonWriter out, ForecastTimeInstant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForecastTimeInstant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForecastTimeInstant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForecastTimeInstant
   * @throws IOException if the JSON string is invalid with respect to ForecastTimeInstant
   */
  public static ForecastTimeInstant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForecastTimeInstant.class);
  }

  /**
   * Convert an instance of ForecastTimeInstant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

