/*
 * Weather API
 * This is a RESTful service that provides accurate and up-to-date weather information based on data sourced from <a href=\"https://api.met.no\">https://api.met.no</a>. <br/>The data are freely available for use under a <a href=\"https://api.met.no/doc/License\">Creative Commons license</a>.
 *
 * The version of the OpenAPI document: 0.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.weather.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.openepi.weather.model.Instant;
import io.openepi.weather.model.Next12Hours;
import io.openepi.weather.model.Next1Hours;
import io.openepi.weather.model.Next6Hours;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.weather.JSON;

/**
 * Data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:24:03.616486+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class Data {
  public static final String SERIALIZED_NAME_INSTANT = "instant";
  @SerializedName(SERIALIZED_NAME_INSTANT)
  private Instant instant;

  public static final String SERIALIZED_NAME_NEXT12_HOURS = "next_12_hours";
  @SerializedName(SERIALIZED_NAME_NEXT12_HOURS)
  private Next12Hours next12Hours;

  public static final String SERIALIZED_NAME_NEXT1_HOURS = "next_1_hours";
  @SerializedName(SERIALIZED_NAME_NEXT1_HOURS)
  private Next1Hours next1Hours;

  public static final String SERIALIZED_NAME_NEXT6_HOURS = "next_6_hours";
  @SerializedName(SERIALIZED_NAME_NEXT6_HOURS)
  private Next6Hours next6Hours;

  public Data() {
  }

  public Data instant(Instant instant) {
    this.instant = instant;
    return this;
  }

  /**
   * Parameters which applies to this exact point in time
   * @return instant
   */
  @javax.annotation.Nonnull
  public Instant getInstant() {
    return instant;
  }

  public void setInstant(Instant instant) {
    this.instant = instant;
  }


  public Data next12Hours(Next12Hours next12Hours) {
    this.next12Hours = next12Hours;
    return this;
  }

  /**
   * Get next12Hours
   * @return next12Hours
   */
  @javax.annotation.Nullable
  public Next12Hours getNext12Hours() {
    return next12Hours;
  }

  public void setNext12Hours(Next12Hours next12Hours) {
    this.next12Hours = next12Hours;
  }


  public Data next1Hours(Next1Hours next1Hours) {
    this.next1Hours = next1Hours;
    return this;
  }

  /**
   * Get next1Hours
   * @return next1Hours
   */
  @javax.annotation.Nullable
  public Next1Hours getNext1Hours() {
    return next1Hours;
  }

  public void setNext1Hours(Next1Hours next1Hours) {
    this.next1Hours = next1Hours;
  }


  public Data next6Hours(Next6Hours next6Hours) {
    this.next6Hours = next6Hours;
    return this;
  }

  /**
   * Get next6Hours
   * @return next6Hours
   */
  @javax.annotation.Nullable
  public Next6Hours getNext6Hours() {
    return next6Hours;
  }

  public void setNext6Hours(Next6Hours next6Hours) {
    this.next6Hours = next6Hours;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Data data = (Data) o;
    return Objects.equals(this.instant, data.instant) &&
        Objects.equals(this.next12Hours, data.next12Hours) &&
        Objects.equals(this.next1Hours, data.next1Hours) &&
        Objects.equals(this.next6Hours, data.next6Hours);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(instant, next12Hours, next1Hours, next6Hours);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Data {\n");
    sb.append("    instant: ").append(toIndentedString(instant)).append("\n");
    sb.append("    next12Hours: ").append(toIndentedString(next12Hours)).append("\n");
    sb.append("    next1Hours: ").append(toIndentedString(next1Hours)).append("\n");
    sb.append("    next6Hours: ").append(toIndentedString(next6Hours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instant");
    openapiFields.add("next_12_hours");
    openapiFields.add("next_1_hours");
    openapiFields.add("next_6_hours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instant");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Data
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Data.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Data is not found in the empty JSON string", Data.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Data.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Data` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Data.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `instant`
      Instant.validateJsonElement(jsonObj.get("instant"));
      // validate the optional field `next_12_hours`
      if (jsonObj.get("next_12_hours") != null && !jsonObj.get("next_12_hours").isJsonNull()) {
        Next12Hours.validateJsonElement(jsonObj.get("next_12_hours"));
      }
      // validate the optional field `next_1_hours`
      if (jsonObj.get("next_1_hours") != null && !jsonObj.get("next_1_hours").isJsonNull()) {
        Next1Hours.validateJsonElement(jsonObj.get("next_1_hours"));
      }
      // validate the optional field `next_6_hours`
      if (jsonObj.get("next_6_hours") != null && !jsonObj.get("next_6_hours").isJsonNull()) {
        Next6Hours.validateJsonElement(jsonObj.get("next_6_hours"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Data.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Data' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Data> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Data.class));

       return (TypeAdapter<T>) new TypeAdapter<Data>() {
           @Override
           public void write(JsonWriter out, Data value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Data read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Data given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Data
   * @throws IOException if the JSON string is invalid with respect to Data
   */
  public static Data fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Data.class);
  }

  /**
   * Convert an instance of Data to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

