/*
 * Weather API
 * This is a RESTful service that provides accurate and up-to-date weather information based on data sourced from <a href=\"https://api.met.no\">https://api.met.no</a>. <br/>The data are freely available for use under a <a href=\"https://api.met.no/doc/License\">Creative Commons license</a>.
 *
 * The version of the OpenAPI document: 0.1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.weather.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.openepi.weather.model.SolarTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.weather.JSON;

/**
 * WeatherApiModelsMetSunriseTypesForecast
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:24:03.616486+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class WeatherApiModelsMetSunriseTypesForecast {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_SUNRISE = "sunrise";
  @SerializedName(SERIALIZED_NAME_SUNRISE)
  private SolarTime sunrise;

  public static final String SERIALIZED_NAME_SUNSET = "sunset";
  @SerializedName(SERIALIZED_NAME_SUNSET)
  private SolarTime sunset;

  public WeatherApiModelsMetSunriseTypesForecast() {
  }

  public WeatherApiModelsMetSunriseTypesForecast body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public WeatherApiModelsMetSunriseTypesForecast sunrise(SolarTime sunrise) {
    this.sunrise = sunrise;
    return this;
  }

  /**
   * Get sunrise
   * @return sunrise
   */
  @javax.annotation.Nonnull
  public SolarTime getSunrise() {
    return sunrise;
  }

  public void setSunrise(SolarTime sunrise) {
    this.sunrise = sunrise;
  }


  public WeatherApiModelsMetSunriseTypesForecast sunset(SolarTime sunset) {
    this.sunset = sunset;
    return this;
  }

  /**
   * Get sunset
   * @return sunset
   */
  @javax.annotation.Nonnull
  public SolarTime getSunset() {
    return sunset;
  }

  public void setSunset(SolarTime sunset) {
    this.sunset = sunset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WeatherApiModelsMetSunriseTypesForecast weatherApiModelsMetSunriseTypesForecast = (WeatherApiModelsMetSunriseTypesForecast) o;
    return Objects.equals(this.body, weatherApiModelsMetSunriseTypesForecast.body) &&
        Objects.equals(this.sunrise, weatherApiModelsMetSunriseTypesForecast.sunrise) &&
        Objects.equals(this.sunset, weatherApiModelsMetSunriseTypesForecast.sunset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, sunrise, sunset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WeatherApiModelsMetSunriseTypesForecast {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    sunrise: ").append(toIndentedString(sunrise)).append("\n");
    sb.append("    sunset: ").append(toIndentedString(sunset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("sunrise");
    openapiFields.add("sunset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("sunrise");
    openapiRequiredFields.add("sunset");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WeatherApiModelsMetSunriseTypesForecast
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WeatherApiModelsMetSunriseTypesForecast.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WeatherApiModelsMetSunriseTypesForecast is not found in the empty JSON string", WeatherApiModelsMetSunriseTypesForecast.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WeatherApiModelsMetSunriseTypesForecast.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WeatherApiModelsMetSunriseTypesForecast` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WeatherApiModelsMetSunriseTypesForecast.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // validate the required field `sunrise`
      SolarTime.validateJsonElement(jsonObj.get("sunrise"));
      // validate the required field `sunset`
      SolarTime.validateJsonElement(jsonObj.get("sunset"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WeatherApiModelsMetSunriseTypesForecast.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WeatherApiModelsMetSunriseTypesForecast' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WeatherApiModelsMetSunriseTypesForecast> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WeatherApiModelsMetSunriseTypesForecast.class));

       return (TypeAdapter<T>) new TypeAdapter<WeatherApiModelsMetSunriseTypesForecast>() {
           @Override
           public void write(JsonWriter out, WeatherApiModelsMetSunriseTypesForecast value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WeatherApiModelsMetSunriseTypesForecast read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WeatherApiModelsMetSunriseTypesForecast given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WeatherApiModelsMetSunriseTypesForecast
   * @throws IOException if the JSON string is invalid with respect to WeatherApiModelsMetSunriseTypesForecast
   */
  public static WeatherApiModelsMetSunriseTypesForecast fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WeatherApiModelsMetSunriseTypesForecast.class);
  }

  /**
   * Convert an instance of WeatherApiModelsMetSunriseTypesForecast to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

