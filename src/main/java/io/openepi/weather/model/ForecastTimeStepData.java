/*
 * Locationforecast
 * Weather forecast for a specified place
 *
 * The version of the OpenAPI document: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.weather.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.openepi.weather.model.ForecastTimeStepDataInstant;
import io.openepi.weather.model.ForecastTimeStepDataNext12Hours;
import io.openepi.weather.model.ForecastTimeStepDataNext1Hours;
import io.openepi.weather.model.ForecastTimeStepDataNext6Hours;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.weather.JSON;

/**
 * Forecast for a specific time
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-12T08:53:23.751911+02:00[Europe/Oslo]", comments = "Generator version: 7.13.0")
public class ForecastTimeStepData {
  public static final String SERIALIZED_NAME_INSTANT = "instant";
  @SerializedName(SERIALIZED_NAME_INSTANT)
  @javax.annotation.Nonnull
  private ForecastTimeStepDataInstant instant;

  public static final String SERIALIZED_NAME_NEXT12_HOURS = "next_12_hours";
  @SerializedName(SERIALIZED_NAME_NEXT12_HOURS)
  @javax.annotation.Nullable
  private ForecastTimeStepDataNext12Hours next12Hours;

  public static final String SERIALIZED_NAME_NEXT1_HOURS = "next_1_hours";
  @SerializedName(SERIALIZED_NAME_NEXT1_HOURS)
  @javax.annotation.Nullable
  private ForecastTimeStepDataNext1Hours next1Hours;

  public static final String SERIALIZED_NAME_NEXT6_HOURS = "next_6_hours";
  @SerializedName(SERIALIZED_NAME_NEXT6_HOURS)
  @javax.annotation.Nullable
  private ForecastTimeStepDataNext6Hours next6Hours;

  public ForecastTimeStepData() {
  }

  public ForecastTimeStepData instant(@javax.annotation.Nonnull ForecastTimeStepDataInstant instant) {
    this.instant = instant;
    return this;
  }

  /**
   * Get instant
   * @return instant
   */
  @javax.annotation.Nonnull
  public ForecastTimeStepDataInstant getInstant() {
    return instant;
  }

  public void setInstant(@javax.annotation.Nonnull ForecastTimeStepDataInstant instant) {
    this.instant = instant;
  }


  public ForecastTimeStepData next12Hours(@javax.annotation.Nullable ForecastTimeStepDataNext12Hours next12Hours) {
    this.next12Hours = next12Hours;
    return this;
  }

  /**
   * Get next12Hours
   * @return next12Hours
   */
  @javax.annotation.Nullable
  public ForecastTimeStepDataNext12Hours getNext12Hours() {
    return next12Hours;
  }

  public void setNext12Hours(@javax.annotation.Nullable ForecastTimeStepDataNext12Hours next12Hours) {
    this.next12Hours = next12Hours;
  }


  public ForecastTimeStepData next1Hours(@javax.annotation.Nullable ForecastTimeStepDataNext1Hours next1Hours) {
    this.next1Hours = next1Hours;
    return this;
  }

  /**
   * Get next1Hours
   * @return next1Hours
   */
  @javax.annotation.Nullable
  public ForecastTimeStepDataNext1Hours getNext1Hours() {
    return next1Hours;
  }

  public void setNext1Hours(@javax.annotation.Nullable ForecastTimeStepDataNext1Hours next1Hours) {
    this.next1Hours = next1Hours;
  }


  public ForecastTimeStepData next6Hours(@javax.annotation.Nullable ForecastTimeStepDataNext6Hours next6Hours) {
    this.next6Hours = next6Hours;
    return this;
  }

  /**
   * Get next6Hours
   * @return next6Hours
   */
  @javax.annotation.Nullable
  public ForecastTimeStepDataNext6Hours getNext6Hours() {
    return next6Hours;
  }

  public void setNext6Hours(@javax.annotation.Nullable ForecastTimeStepDataNext6Hours next6Hours) {
    this.next6Hours = next6Hours;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastTimeStepData forecastTimeStepData = (ForecastTimeStepData) o;
    return Objects.equals(this.instant, forecastTimeStepData.instant) &&
        Objects.equals(this.next12Hours, forecastTimeStepData.next12Hours) &&
        Objects.equals(this.next1Hours, forecastTimeStepData.next1Hours) &&
        Objects.equals(this.next6Hours, forecastTimeStepData.next6Hours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instant, next12Hours, next1Hours, next6Hours);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastTimeStepData {\n");
    sb.append("    instant: ").append(toIndentedString(instant)).append("\n");
    sb.append("    next12Hours: ").append(toIndentedString(next12Hours)).append("\n");
    sb.append("    next1Hours: ").append(toIndentedString(next1Hours)).append("\n");
    sb.append("    next6Hours: ").append(toIndentedString(next6Hours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instant");
    openapiFields.add("next_12_hours");
    openapiFields.add("next_1_hours");
    openapiFields.add("next_6_hours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instant");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForecastTimeStepData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForecastTimeStepData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForecastTimeStepData is not found in the empty JSON string", ForecastTimeStepData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForecastTimeStepData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForecastTimeStepData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ForecastTimeStepData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `instant`
      ForecastTimeStepDataInstant.validateJsonElement(jsonObj.get("instant"));
      // validate the optional field `next_12_hours`
      if (jsonObj.get("next_12_hours") != null && !jsonObj.get("next_12_hours").isJsonNull()) {
        ForecastTimeStepDataNext12Hours.validateJsonElement(jsonObj.get("next_12_hours"));
      }
      // validate the optional field `next_1_hours`
      if (jsonObj.get("next_1_hours") != null && !jsonObj.get("next_1_hours").isJsonNull()) {
        ForecastTimeStepDataNext1Hours.validateJsonElement(jsonObj.get("next_1_hours"));
      }
      // validate the optional field `next_6_hours`
      if (jsonObj.get("next_6_hours") != null && !jsonObj.get("next_6_hours").isJsonNull()) {
        ForecastTimeStepDataNext6Hours.validateJsonElement(jsonObj.get("next_6_hours"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForecastTimeStepData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForecastTimeStepData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForecastTimeStepData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForecastTimeStepData.class));

       return (TypeAdapter<T>) new TypeAdapter<ForecastTimeStepData>() {
           @Override
           public void write(JsonWriter out, ForecastTimeStepData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForecastTimeStepData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForecastTimeStepData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForecastTimeStepData
   * @throws IOException if the JSON string is invalid with respect to ForecastTimeStepData
   */
  public static ForecastTimeStepData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForecastTimeStepData.class);
  }

  /**
   * Convert an instance of ForecastTimeStepData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

