/*
 * Locationforecast
 * Weather forecast for a specified place
 *
 * The version of the OpenAPI document: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.weather;

import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Supplier;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-12T08:53:23.751911+02:00[Europe/Oslo]", comments = "Generator version: 7.13.0")
public class WeatherConfiguration {
  public static final String VERSION = "2.0";

  private static final AtomicReference<WeatherClient> defaultSunriseClient = new AtomicReference<>();
  private static volatile Supplier<WeatherClient> SunriseClientFactory = WeatherClient::new;

  /**
   * Get the default API client, which would be used when creating API instances without providing an API client.
   *
   * @return Default API client
   */
  public static WeatherClient getDefaultSunriseClient() {
    WeatherClient client = defaultSunriseClient.get();
    if (client == null) {
      client = defaultSunriseClient.updateAndGet(val -> {
        if (val != null) { // changed by another thread
          return val;
        }
        return SunriseClientFactory.get();
      });
    }
    return client;
  }

  /**
   * Set the default API client, which would be used when creating API instances without providing an API client.
   *
   * @param weatherClient API client
   */
  public static void setDefaultSunriseClient(WeatherClient weatherClient) {
    defaultSunriseClient.set(weatherClient);
  }

  /**
   * set the callback used to create new SunriseClient objects
   */
  public static void setSunriseClientFactory(Supplier<WeatherClient> factory) {
    SunriseClientFactory = Objects.requireNonNull(factory);
  }

  private WeatherConfiguration() {
  }
}