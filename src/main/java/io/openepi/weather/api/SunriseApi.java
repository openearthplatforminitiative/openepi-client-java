/*
 * Sunrise
 * Calculate sun or moon events, as seen from a specific location on Earth
 *
 * The version of the OpenAPI document: 3.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.weather.api;

import io.openepi.common.ApiCallback;
import io.openepi.common.ApiException;
import io.openepi.common.ApiResponse;
import io.openepi.common.Pair;
import io.openepi.weather.SunriseClient;
import io.openepi.weather.SunriseConfiguration;

import com.google.gson.reflect.TypeToken;
import io.openepi.weather.model.METJSONSunrise;


import java.math.BigDecimal;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SunriseApi {
    private SunriseClient localVarSunriseClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SunriseApi() {
        this(SunriseConfiguration.getDefaultSunriseClient());
    }

    public SunriseApi(SunriseClient SunriseClient) {
        this.localVarSunriseClient = SunriseClient;
    }

    public SunriseClient getSunriseClient() {
        return localVarSunriseClient;
    }

    public void setSunriseClient(SunriseClient SunriseClient) {
        this.localVarSunriseClient = SunriseClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for moonGet
     * @param lat latitude (required)
     * @param lon longtitude (required)
     * @param date date (on YYYY-MM-DD format) in local time, not UTC. Defaults to today (optional)
     * @param offset timezone offset string (e.g +02:00 or -04:30\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moonGetCall(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable LocalDate date, @javax.annotation.Nullable String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/moon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarSunriseClient.parameterToPair("date", date));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarSunriseClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarSunriseClient.parameterToPair("lon", lon));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarSunriseClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarSunriseClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarSunriseClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarSunriseClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moonGetValidateBeforeCall(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable LocalDate date, @javax.annotation.Nullable String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling moonGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling moonGet(Async)");
        }

        return moonGetCall(lat, lon, date, offset, _callback);

    }

    /**
     * 
     * Calculate sun or moon events, as seen from a specific location on Earth
     * @param lat latitude (required)
     * @param lon longtitude (required)
     * @param date date (on YYYY-MM-DD format) in local time, not UTC. Defaults to today (optional)
     * @param offset timezone offset string (e.g +02:00 or -04:30\&quot;) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public String getMoon(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nullable LocalDate date, @javax.annotation.Nullable String offset) throws ApiException {
        ApiResponse<String> localVarResp = moonGetWithHttpInfo(lat.floatValue(), lon.floatValue(), date, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Calculate sun or moon events, as seen from a specific location on Earth
     * @param lat latitude (required)
     * @param lon longtitude (required)
     * @param date date (on YYYY-MM-DD format) in local time, not UTC. Defaults to today (optional)
     * @param offset timezone offset string (e.g +02:00 or -04:30\&quot;) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> moonGetWithHttpInfo(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable LocalDate date, @javax.annotation.Nullable String offset) throws ApiException {
        okhttp3.Call localVarCall = moonGetValidateBeforeCall(lat, lon, date, offset, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarSunriseClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Calculate sun or moon events, as seen from a specific location on Earth
     * @param lat latitude (required)
     * @param lon longtitude (required)
     * @param date date (on YYYY-MM-DD format) in local time, not UTC. Defaults to today (optional)
     * @param offset timezone offset string (e.g +02:00 or -04:30\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMoonAsync(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nullable LocalDate date, @javax.annotation.Nullable String offset, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = moonGetValidateBeforeCall(lat.floatValue(), lon.floatValue(), date, offset, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarSunriseClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sunGet
     * @param lat latitude (required)
     * @param lon longtitude (required)
     * @param date date (on YYYY-MM-DD format) in local time, not UTC. Defaults to today (optional)
     * @param offset timezone offset string (e.g +02:00 or -04:30\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sunGetCall(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable LocalDate date, @javax.annotation.Nullable String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarSunriseClient.parameterToPair("date", date));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarSunriseClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarSunriseClient.parameterToPair("lon", lon));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarSunriseClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarSunriseClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarSunriseClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarSunriseClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sunGetValidateBeforeCall(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable LocalDate date, @javax.annotation.Nullable String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling sunGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling sunGet(Async)");
        }

        return sunGetCall(lat, lon, date, offset, _callback);

    }

    /**
     * 
     * Calculate sun or moon events, as seen from a specific location on Earth
     * @param lat latitude (required)
     * @param lon longtitude (required)
     * @param date date (on YYYY-MM-DD format) in local time, not UTC. Defaults to today (optional)
     * @param offset timezone offset string (e.g +02:00 or -04:30\&quot;) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public METJSONSunrise getSunriseAndSunset(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nullable LocalDate date, @javax.annotation.Nullable String offset) throws ApiException {
        ApiResponse<METJSONSunrise> localVarResp = sunGetWithHttpInfo(lat.floatValue(), lon.floatValue(), date, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Calculate sun or moon events, as seen from a specific location on Earth
     * @param lat latitude (required)
     * @param lon longtitude (required)
     * @param date date (on YYYY-MM-DD format) in local time, not UTC. Defaults to today (optional)
     * @param offset timezone offset string (e.g +02:00 or -04:30\&quot;) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<METJSONSunrise> sunGetWithHttpInfo(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable LocalDate date, @javax.annotation.Nullable String offset) throws ApiException {
        okhttp3.Call localVarCall = sunGetValidateBeforeCall(lat, lon, date, offset, null);
        Type localVarReturnType = new TypeToken<METJSONSunrise>(){}.getType();
        return localVarSunriseClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Calculate sun or moon events, as seen from a specific location on Earth
     * @param lat latitude (required)
     * @param lon longtitude (required)
     * @param date date (on YYYY-MM-DD format) in local time, not UTC. Defaults to today (optional)
     * @param offset timezone offset string (e.g +02:00 or -04:30\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSunriseAndSunsetAsync(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nullable LocalDate date, @javax.annotation.Nullable String offset, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = sunGetValidateBeforeCall(lat.floatValue(), lon.floatValue(), date, offset, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarSunriseClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
