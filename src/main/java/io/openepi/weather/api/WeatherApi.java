/*
 * Locationforecast
 * Weather forecast for a specified place
 *
 * The version of the OpenAPI document: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.weather.api;

import io.openepi.common.ApiCallback;
import io.openepi.common.ApiException;
import io.openepi.common.ApiResponse;
import io.openepi.common.Pair;
import io.openepi.weather.WeatherClient;
import io.openepi.weather.WeatherConfiguration;

import com.google.gson.reflect.TypeToken;


import io.openepi.weather.model.METJSONForecast;

import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WeatherApi {
    private WeatherClient localVarWeatherClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WeatherApi() {
        this(WeatherConfiguration.getDefaultSunriseClient());
    }

    public WeatherApi(WeatherClient weatherClient) {
        this.localVarWeatherClient = weatherClient;
    }

    public WeatherClient getSunriseClient() {
        return localVarWeatherClient;
    }

    public void setSunriseClient(WeatherClient weatherClient) {
        this.localVarWeatherClient = weatherClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }


    /**
     * Build call for classicGet
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classicGetCall(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable Integer altitude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (altitude != null) {
            localVarQueryParams.addAll(localVarWeatherClient.parameterToPair("altitude", altitude));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarWeatherClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarWeatherClient.parameterToPair("lon", lon));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarWeatherClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarWeatherClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarWeatherClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classicGetValidateBeforeCall(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable Integer altitude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling classicGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling classicGet(Async)");
        }

        return classicGetCall(lat, lon, altitude, _callback);

    }

    /**
     * 
     * Weather forecast for a specified place
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public String getClassicForecast(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nullable Integer altitude) throws ApiException {
        ApiResponse<String> localVarResp = classicGetWithHttpInfo(lat.floatValue(), lon.floatValue(), altitude);
        return localVarResp.getData();
    }

    /**
     * 
     * Weather forecast for a specified place
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> classicGetWithHttpInfo(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable Integer altitude) throws ApiException {
        okhttp3.Call localVarCall = classicGetValidateBeforeCall(lat, lon, altitude, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarWeatherClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Weather forecast for a specified place
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassicForecastAsync(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nullable Integer altitude, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = classicGetValidateBeforeCall(lat.floatValue(), lon.floatValue(), altitude, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarWeatherClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for compactGet
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compactGetCall(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable Integer altitude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (altitude != null) {
            localVarQueryParams.addAll(localVarWeatherClient.parameterToPair("altitude", altitude));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarWeatherClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarWeatherClient.parameterToPair("lon", lon));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarWeatherClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarWeatherClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarWeatherClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compactGetValidateBeforeCall(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable Integer altitude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling compactGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling compactGet(Async)");
        }

        return compactGetCall(lat, lon, altitude, _callback);

    }

    /**
     * 
     * Weather forecast for a specified place
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @return METJSONForecast
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public METJSONForecast getCompactForecast(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nullable Integer altitude) throws ApiException {
        ApiResponse<METJSONForecast> localVarResp = compactGetWithHttpInfo(lat.floatValue(), lon.floatValue(), altitude);
        return localVarResp.getData();
    }

    /**
     * 
     * Weather forecast for a specified place
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @return ApiResponse&lt;METJSONForecast&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<METJSONForecast> compactGetWithHttpInfo(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable Integer altitude) throws ApiException {
        okhttp3.Call localVarCall = compactGetValidateBeforeCall(lat, lon, altitude, null);
        Type localVarReturnType = new TypeToken<METJSONForecast>(){}.getType();
        return localVarWeatherClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Weather forecast for a specified place
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompactForecastAsync(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nullable Integer altitude, final ApiCallback<METJSONForecast> _callback) throws ApiException {

        okhttp3.Call localVarCall = compactGetValidateBeforeCall(lat.floatValue(), lon.floatValue(), altitude, _callback);
        Type localVarReturnType = new TypeToken<METJSONForecast>(){}.getType();
        localVarWeatherClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for completeGet
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeGetCall(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable Integer altitude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (altitude != null) {
            localVarQueryParams.addAll(localVarWeatherClient.parameterToPair("altitude", altitude));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarWeatherClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarWeatherClient.parameterToPair("lon", lon));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarWeatherClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarWeatherClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarWeatherClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeGetValidateBeforeCall(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable Integer altitude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling completeGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling completeGet(Async)");
        }

        return completeGetCall(lat, lon, altitude, _callback);

    }

    /**
     * 
     * Weather forecast for a specified place
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @return METJSONForecast
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public METJSONForecast getCompleteForecast(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nullable Integer altitude) throws ApiException {
        ApiResponse<METJSONForecast> localVarResp = completeGetWithHttpInfo(lat.floatValue(), lon.floatValue(), altitude);
        return localVarResp.getData();
    }

    /**
     * 
     * Weather forecast for a specified place
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @return ApiResponse&lt;METJSONForecast&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<METJSONForecast> completeGetWithHttpInfo(@javax.annotation.Nonnull Float lat, @javax.annotation.Nonnull Float lon, @javax.annotation.Nullable Integer altitude) throws ApiException {
        okhttp3.Call localVarCall = completeGetValidateBeforeCall(lat, lon, altitude, null);
        Type localVarReturnType = new TypeToken<METJSONForecast>(){}.getType();
        return localVarWeatherClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Weather forecast for a specified place
     * @param lat Latitude (required)
     * @param lon Longitude (required)
     * @param altitude Whole meters above sea level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> 422 Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> 502 Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> 503 Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> 504 Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompleteForecastAsync(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nullable Integer altitude, final ApiCallback<METJSONForecast> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeGetValidateBeforeCall(lat.floatValue(), lon.floatValue(), altitude, _callback);
        Type localVarReturnType = new TypeToken<METJSONForecast>(){}.getType();
        localVarWeatherClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
