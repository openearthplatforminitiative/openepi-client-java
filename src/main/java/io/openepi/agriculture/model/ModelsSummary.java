/*
 * Agriculture API
 * This API is used to get aggregated data from Deforestation, Flood, Weather and Soil APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.agriculture.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.openepi.agriculture.model.ModelsDeforestation;
import io.openepi.agriculture.model.ModelsFlood;
import io.openepi.agriculture.model.ModelsSoilType;
import io.openepi.agriculture.model.ModelsWeather;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.agriculture.JSON;

/**
 * ModelsSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T12:55:09.550932+01:00[Europe/Oslo]", comments = "Generator version: 7.8.0")
public class ModelsSummary {
  public static final String SERIALIZED_NAME_DEFORESTATION = "deforestation";
  @SerializedName(SERIALIZED_NAME_DEFORESTATION)
  private ModelsDeforestation deforestation;

  public static final String SERIALIZED_NAME_FLOOD = "flood";
  @SerializedName(SERIALIZED_NAME_FLOOD)
  private ModelsFlood flood;

  public static final String SERIALIZED_NAME_SOIL = "soil";
  @SerializedName(SERIALIZED_NAME_SOIL)
  private ModelsSoilType soil;

  public static final String SERIALIZED_NAME_WEATHER = "weather";
  @SerializedName(SERIALIZED_NAME_WEATHER)
  private ModelsWeather weather;

  public ModelsSummary() {
  }

  public ModelsSummary deforestation(ModelsDeforestation deforestation) {
    this.deforestation = deforestation;
    return this;
  }

  /**
   * deforestation from 2001 to 2022 in the given coordinates.
   * @return deforestation
   */
  @javax.annotation.Nullable
  public ModelsDeforestation getDeforestation() {
    return deforestation;
  }

  public void setDeforestation(ModelsDeforestation deforestation) {
    this.deforestation = deforestation;
  }


  public ModelsSummary flood(ModelsFlood flood) {
    this.flood = flood;
    return this;
  }

  /**
   * Flood forecast in the given coordinates.
   * @return flood
   */
  @javax.annotation.Nullable
  public ModelsFlood getFlood() {
    return flood;
  }

  public void setFlood(ModelsFlood flood) {
    this.flood = flood;
  }


  public ModelsSummary soil(ModelsSoilType soil) {
    this.soil = soil;
    return this;
  }

  /**
   * The most probable soil type in the given coordinates.
   * @return soil
   */
  @javax.annotation.Nullable
  public ModelsSoilType getSoil() {
    return soil;
  }

  public void setSoil(ModelsSoilType soil) {
    this.soil = soil;
  }


  public ModelsSummary weather(ModelsWeather weather) {
    this.weather = weather;
    return this;
  }

  /**
   * Current weather and rain forecast in the given coordinates.
   * @return weather
   */
  @javax.annotation.Nullable
  public ModelsWeather getWeather() {
    return weather;
  }

  public void setWeather(ModelsWeather weather) {
    this.weather = weather;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsSummary modelsSummary = (ModelsSummary) o;
    return Objects.equals(this.deforestation, modelsSummary.deforestation) &&
        Objects.equals(this.flood, modelsSummary.flood) &&
        Objects.equals(this.soil, modelsSummary.soil) &&
        Objects.equals(this.weather, modelsSummary.weather);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deforestation, flood, soil, weather);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsSummary {\n");
    sb.append("    deforestation: ").append(toIndentedString(deforestation)).append("\n");
    sb.append("    flood: ").append(toIndentedString(flood)).append("\n");
    sb.append("    soil: ").append(toIndentedString(soil)).append("\n");
    sb.append("    weather: ").append(toIndentedString(weather)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deforestation");
    openapiFields.add("flood");
    openapiFields.add("soil");
    openapiFields.add("weather");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelsSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelsSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsSummary is not found in the empty JSON string", ModelsSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelsSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deforestation`
      if (jsonObj.get("deforestation") != null && !jsonObj.get("deforestation").isJsonNull()) {
        ModelsDeforestation.validateJsonElement(jsonObj.get("deforestation"));
      }
      // validate the optional field `flood`
      if (jsonObj.get("flood") != null && !jsonObj.get("flood").isJsonNull()) {
        ModelsFlood.validateJsonElement(jsonObj.get("flood"));
      }
      // validate the optional field `soil`
      if (jsonObj.get("soil") != null && !jsonObj.get("soil").isJsonNull()) {
        ModelsSoilType.validateJsonElement(jsonObj.get("soil"));
      }
      // validate the optional field `weather`
      if (jsonObj.get("weather") != null && !jsonObj.get("weather").isJsonNull()) {
        ModelsWeather.validateJsonElement(jsonObj.get("weather"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsSummary>() {
           @Override
           public void write(JsonWriter out, ModelsSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelsSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelsSummary
   * @throws IOException if the JSON string is invalid with respect to ModelsSummary
   */
  public static ModelsSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsSummary.class);
  }

  /**
   * Convert an instance of ModelsSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

