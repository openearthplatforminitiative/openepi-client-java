/*
 * Agriculture API
 * This API is used to get aggregated data from Deforestation, Flood, Weather and Soil APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.agriculture.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.openepi.agriculture.model.ModelsIntensityEnum;
import io.openepi.agriculture.model.ModelsPeakTimingEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.agriculture.JSON;

/**
 * ModelsFlood
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T12:55:09.550932+01:00[Europe/Oslo]", comments = "Generator version: 7.8.0")
public class ModelsFlood {
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_INTENSITY = "intensity";
  @SerializedName(SERIALIZED_NAME_INTENSITY)
  private ModelsIntensityEnum intensity;

  public static final String SERIALIZED_NAME_ISSUED_ON = "issued_on";
  @SerializedName(SERIALIZED_NAME_ISSUED_ON)
  private String issuedOn;

  public static final String SERIALIZED_NAME_PEAK_DAY = "peak_day";
  @SerializedName(SERIALIZED_NAME_PEAK_DAY)
  private String peakDay;

  public static final String SERIALIZED_NAME_PEAK_STEP = "peak_step";
  @SerializedName(SERIALIZED_NAME_PEAK_STEP)
  private Integer peakStep;

  public static final String SERIALIZED_NAME_PEAK_TIMING = "peak_timing";
  @SerializedName(SERIALIZED_NAME_PEAK_TIMING)
  private ModelsPeakTimingEnum peakTiming;

  public ModelsFlood() {
  }

  public ModelsFlood error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public ModelsFlood intensity(ModelsIntensityEnum intensity) {
    this.intensity = intensity;
    return this;
  }

  /**
   * Get intensity
   * @return intensity
   */
  @javax.annotation.Nullable
  public ModelsIntensityEnum getIntensity() {
    return intensity;
  }

  public void setIntensity(ModelsIntensityEnum intensity) {
    this.intensity = intensity;
  }


  public ModelsFlood issuedOn(String issuedOn) {
    this.issuedOn = issuedOn;
    return this;
  }

  /**
   * Get issuedOn
   * @return issuedOn
   */
  @javax.annotation.Nullable
  public String getIssuedOn() {
    return issuedOn;
  }

  public void setIssuedOn(String issuedOn) {
    this.issuedOn = issuedOn;
  }


  public ModelsFlood peakDay(String peakDay) {
    this.peakDay = peakDay;
    return this;
  }

  /**
   * Get peakDay
   * @return peakDay
   */
  @javax.annotation.Nullable
  public String getPeakDay() {
    return peakDay;
  }

  public void setPeakDay(String peakDay) {
    this.peakDay = peakDay;
  }


  public ModelsFlood peakStep(Integer peakStep) {
    this.peakStep = peakStep;
    return this;
  }

  /**
   * Get peakStep
   * @return peakStep
   */
  @javax.annotation.Nullable
  public Integer getPeakStep() {
    return peakStep;
  }

  public void setPeakStep(Integer peakStep) {
    this.peakStep = peakStep;
  }


  public ModelsFlood peakTiming(ModelsPeakTimingEnum peakTiming) {
    this.peakTiming = peakTiming;
    return this;
  }

  /**
   * Get peakTiming
   * @return peakTiming
   */
  @javax.annotation.Nullable
  public ModelsPeakTimingEnum getPeakTiming() {
    return peakTiming;
  }

  public void setPeakTiming(ModelsPeakTimingEnum peakTiming) {
    this.peakTiming = peakTiming;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsFlood modelsFlood = (ModelsFlood) o;
    return Objects.equals(this.error, modelsFlood.error) &&
        Objects.equals(this.intensity, modelsFlood.intensity) &&
        Objects.equals(this.issuedOn, modelsFlood.issuedOn) &&
        Objects.equals(this.peakDay, modelsFlood.peakDay) &&
        Objects.equals(this.peakStep, modelsFlood.peakStep) &&
        Objects.equals(this.peakTiming, modelsFlood.peakTiming);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, intensity, issuedOn, peakDay, peakStep, peakTiming);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsFlood {\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    intensity: ").append(toIndentedString(intensity)).append("\n");
    sb.append("    issuedOn: ").append(toIndentedString(issuedOn)).append("\n");
    sb.append("    peakDay: ").append(toIndentedString(peakDay)).append("\n");
    sb.append("    peakStep: ").append(toIndentedString(peakStep)).append("\n");
    sb.append("    peakTiming: ").append(toIndentedString(peakTiming)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error");
    openapiFields.add("intensity");
    openapiFields.add("issued_on");
    openapiFields.add("peak_day");
    openapiFields.add("peak_step");
    openapiFields.add("peak_timing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelsFlood
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelsFlood.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsFlood is not found in the empty JSON string", ModelsFlood.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelsFlood.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsFlood` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      // validate the optional field `intensity`
      if (jsonObj.get("intensity") != null && !jsonObj.get("intensity").isJsonNull()) {
        ModelsIntensityEnum.validateJsonElement(jsonObj.get("intensity"));
      }
      if ((jsonObj.get("issued_on") != null && !jsonObj.get("issued_on").isJsonNull()) && !jsonObj.get("issued_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issued_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issued_on").toString()));
      }
      if ((jsonObj.get("peak_day") != null && !jsonObj.get("peak_day").isJsonNull()) && !jsonObj.get("peak_day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peak_day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peak_day").toString()));
      }
      // validate the optional field `peak_timing`
      if (jsonObj.get("peak_timing") != null && !jsonObj.get("peak_timing").isJsonNull()) {
        ModelsPeakTimingEnum.validateJsonElement(jsonObj.get("peak_timing"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsFlood.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsFlood' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsFlood> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsFlood.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsFlood>() {
           @Override
           public void write(JsonWriter out, ModelsFlood value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsFlood read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelsFlood given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelsFlood
   * @throws IOException if the JSON string is invalid with respect to ModelsFlood
   */
  public static ModelsFlood fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsFlood.class);
  }

  /**
   * Convert an instance of ModelsFlood to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

