/*
 * Agriculture API
 * This API is used to get aggregated data from Deforestation, Flood, Weather and Soil APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.agriculture.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.agriculture.JSON;

/**
 * ModelsWeather
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T12:55:09.550932+01:00[Europe/Oslo]", comments = "Generator version: 7.8.0")
public class ModelsWeather {
  public static final String SERIALIZED_NAME_AIR_TEMPERATURE = "air_temperature";
  @SerializedName(SERIALIZED_NAME_AIR_TEMPERATURE)
  private BigDecimal airTemperature;

  public static final String SERIALIZED_NAME_CLOUD_AREA_FRACTION = "cloud_area_fraction";
  @SerializedName(SERIALIZED_NAME_CLOUD_AREA_FRACTION)
  private BigDecimal cloudAreaFraction;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_PRECIPITATION_AMOUNT = "precipitation_amount";
  @SerializedName(SERIALIZED_NAME_PRECIPITATION_AMOUNT)
  private BigDecimal precipitationAmount;

  public static final String SERIALIZED_NAME_RELATIVE_HUMIDITY = "relative_humidity";
  @SerializedName(SERIALIZED_NAME_RELATIVE_HUMIDITY)
  private BigDecimal relativeHumidity;

  public static final String SERIALIZED_NAME_WIND_FROM_DIRECTION = "wind_from_direction";
  @SerializedName(SERIALIZED_NAME_WIND_FROM_DIRECTION)
  private BigDecimal windFromDirection;

  public static final String SERIALIZED_NAME_WIND_SPEED = "wind_speed";
  @SerializedName(SERIALIZED_NAME_WIND_SPEED)
  private BigDecimal windSpeed;

  public static final String SERIALIZED_NAME_WIND_SPEED_OF_GUST = "wind_speed_of_gust";
  @SerializedName(SERIALIZED_NAME_WIND_SPEED_OF_GUST)
  private BigDecimal windSpeedOfGust;

  public ModelsWeather() {
  }

  public ModelsWeather airTemperature(BigDecimal airTemperature) {
    this.airTemperature = airTemperature;
    return this;
  }

  /**
   * Get airTemperature
   * @return airTemperature
   */
  @javax.annotation.Nullable
  public BigDecimal getAirTemperature() {
    return airTemperature;
  }

  public void setAirTemperature(BigDecimal airTemperature) {
    this.airTemperature = airTemperature;
  }


  public ModelsWeather cloudAreaFraction(BigDecimal cloudAreaFraction) {
    this.cloudAreaFraction = cloudAreaFraction;
    return this;
  }

  /**
   * Get cloudAreaFraction
   * @return cloudAreaFraction
   */
  @javax.annotation.Nullable
  public BigDecimal getCloudAreaFraction() {
    return cloudAreaFraction;
  }

  public void setCloudAreaFraction(BigDecimal cloudAreaFraction) {
    this.cloudAreaFraction = cloudAreaFraction;
  }


  public ModelsWeather error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public ModelsWeather precipitationAmount(BigDecimal precipitationAmount) {
    this.precipitationAmount = precipitationAmount;
    return this;
  }

  /**
   * Get precipitationAmount
   * @return precipitationAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getPrecipitationAmount() {
    return precipitationAmount;
  }

  public void setPrecipitationAmount(BigDecimal precipitationAmount) {
    this.precipitationAmount = precipitationAmount;
  }


  public ModelsWeather relativeHumidity(BigDecimal relativeHumidity) {
    this.relativeHumidity = relativeHumidity;
    return this;
  }

  /**
   * Get relativeHumidity
   * @return relativeHumidity
   */
  @javax.annotation.Nullable
  public BigDecimal getRelativeHumidity() {
    return relativeHumidity;
  }

  public void setRelativeHumidity(BigDecimal relativeHumidity) {
    this.relativeHumidity = relativeHumidity;
  }


  public ModelsWeather windFromDirection(BigDecimal windFromDirection) {
    this.windFromDirection = windFromDirection;
    return this;
  }

  /**
   * Get windFromDirection
   * @return windFromDirection
   */
  @javax.annotation.Nullable
  public BigDecimal getWindFromDirection() {
    return windFromDirection;
  }

  public void setWindFromDirection(BigDecimal windFromDirection) {
    this.windFromDirection = windFromDirection;
  }


  public ModelsWeather windSpeed(BigDecimal windSpeed) {
    this.windSpeed = windSpeed;
    return this;
  }

  /**
   * Get windSpeed
   * @return windSpeed
   */
  @javax.annotation.Nullable
  public BigDecimal getWindSpeed() {
    return windSpeed;
  }

  public void setWindSpeed(BigDecimal windSpeed) {
    this.windSpeed = windSpeed;
  }


  public ModelsWeather windSpeedOfGust(BigDecimal windSpeedOfGust) {
    this.windSpeedOfGust = windSpeedOfGust;
    return this;
  }

  /**
   * Get windSpeedOfGust
   * @return windSpeedOfGust
   */
  @javax.annotation.Nullable
  public BigDecimal getWindSpeedOfGust() {
    return windSpeedOfGust;
  }

  public void setWindSpeedOfGust(BigDecimal windSpeedOfGust) {
    this.windSpeedOfGust = windSpeedOfGust;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsWeather modelsWeather = (ModelsWeather) o;
    return Objects.equals(this.airTemperature, modelsWeather.airTemperature) &&
        Objects.equals(this.cloudAreaFraction, modelsWeather.cloudAreaFraction) &&
        Objects.equals(this.error, modelsWeather.error) &&
        Objects.equals(this.precipitationAmount, modelsWeather.precipitationAmount) &&
        Objects.equals(this.relativeHumidity, modelsWeather.relativeHumidity) &&
        Objects.equals(this.windFromDirection, modelsWeather.windFromDirection) &&
        Objects.equals(this.windSpeed, modelsWeather.windSpeed) &&
        Objects.equals(this.windSpeedOfGust, modelsWeather.windSpeedOfGust);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airTemperature, cloudAreaFraction, error, precipitationAmount, relativeHumidity, windFromDirection, windSpeed, windSpeedOfGust);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsWeather {\n");
    sb.append("    airTemperature: ").append(toIndentedString(airTemperature)).append("\n");
    sb.append("    cloudAreaFraction: ").append(toIndentedString(cloudAreaFraction)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    precipitationAmount: ").append(toIndentedString(precipitationAmount)).append("\n");
    sb.append("    relativeHumidity: ").append(toIndentedString(relativeHumidity)).append("\n");
    sb.append("    windFromDirection: ").append(toIndentedString(windFromDirection)).append("\n");
    sb.append("    windSpeed: ").append(toIndentedString(windSpeed)).append("\n");
    sb.append("    windSpeedOfGust: ").append(toIndentedString(windSpeedOfGust)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("air_temperature");
    openapiFields.add("cloud_area_fraction");
    openapiFields.add("error");
    openapiFields.add("precipitation_amount");
    openapiFields.add("relative_humidity");
    openapiFields.add("wind_from_direction");
    openapiFields.add("wind_speed");
    openapiFields.add("wind_speed_of_gust");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelsWeather
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelsWeather.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsWeather is not found in the empty JSON string", ModelsWeather.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelsWeather.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsWeather` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsWeather.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsWeather' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsWeather> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsWeather.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsWeather>() {
           @Override
           public void write(JsonWriter out, ModelsWeather value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsWeather read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelsWeather given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelsWeather
   * @throws IOException if the JSON string is invalid with respect to ModelsWeather
   */
  public static ModelsWeather fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsWeather.class);
  }

  /**
   * Convert an instance of ModelsWeather to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

