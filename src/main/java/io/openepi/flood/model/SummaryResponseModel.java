/*
 * Flood API
 * This is a RESTful service that provides accurate and up-to-date flood information for the geographic region bounded by the following coordinates: `min_lon=-18.0`, `min_lat=-6.0`, `max_lon=52.0`, `max_lat=17.0`.<br/>The data are produced for the <a href='https://www.globalfloods.eu/'>Global Flood Awareness System</a> and sourced from the <a href='https://cds.climate.copernicus.eu/cdsapp#!/dataset/cems-glofas-forecast?tab=overview'>Copernicus Climate Data Store</a>. <br/>Please note that the datasets are licensed under the <a href='https://www.globalfloods.eu/terms-of-service/'>CEMS-FLOODS datasets licence</a>, which is not a standard open license. We use them in our pre-project to explore relevant data.
 *
 * The version of the OpenAPI document: 0.9.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.flood.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.openepi.flood.model.SummaryFeatureCollection;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.flood.JSON;

/**
 * SummaryResponseModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-24T13:54:08.842155+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class SummaryResponseModel {
  public static final String SERIALIZED_NAME_QUERIED_LOCATION = "queried_location";
  @SerializedName(SERIALIZED_NAME_QUERIED_LOCATION)
  private SummaryFeatureCollection queriedLocation;

  public static final String SERIALIZED_NAME_NEIGHBORING_LOCATION = "neighboring_location";
  @SerializedName(SERIALIZED_NAME_NEIGHBORING_LOCATION)
  private SummaryFeatureCollection neighboringLocation;

  public SummaryResponseModel() {
  }

  public SummaryResponseModel queriedLocation(SummaryFeatureCollection queriedLocation) {
    this.queriedLocation = queriedLocation;
    return this;
  }

  /**
   * A feature collection representing the queried location&#39;s summary forecast data.
   * @return queriedLocation
   */
  @javax.annotation.Nonnull
  public SummaryFeatureCollection getQueriedLocation() {
    return queriedLocation;
  }

  public void setQueriedLocation(SummaryFeatureCollection queriedLocation) {
    this.queriedLocation = queriedLocation;
  }


  public SummaryResponseModel neighboringLocation(SummaryFeatureCollection neighboringLocation) {
    this.neighboringLocation = neighboringLocation;
    return this;
  }

  /**
   * Get neighboringLocation
   * @return neighboringLocation
   */
  @javax.annotation.Nullable
  public SummaryFeatureCollection getNeighboringLocation() {
    return neighboringLocation;
  }

  public void setNeighboringLocation(SummaryFeatureCollection neighboringLocation) {
    this.neighboringLocation = neighboringLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SummaryResponseModel summaryResponseModel = (SummaryResponseModel) o;
    return Objects.equals(this.queriedLocation, summaryResponseModel.queriedLocation) &&
        Objects.equals(this.neighboringLocation, summaryResponseModel.neighboringLocation);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(queriedLocation, neighboringLocation);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SummaryResponseModel {\n");
    sb.append("    queriedLocation: ").append(toIndentedString(queriedLocation)).append("\n");
    sb.append("    neighboringLocation: ").append(toIndentedString(neighboringLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("queried_location");
    openapiFields.add("neighboring_location");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("queried_location");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SummaryResponseModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SummaryResponseModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SummaryResponseModel is not found in the empty JSON string", SummaryResponseModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SummaryResponseModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SummaryResponseModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SummaryResponseModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `queried_location`
      SummaryFeatureCollection.validateJsonElement(jsonObj.get("queried_location"));
      // validate the optional field `neighboring_location`
      if (jsonObj.get("neighboring_location") != null && !jsonObj.get("neighboring_location").isJsonNull()) {
        SummaryFeatureCollection.validateJsonElement(jsonObj.get("neighboring_location"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SummaryResponseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SummaryResponseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SummaryResponseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SummaryResponseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<SummaryResponseModel>() {
           @Override
           public void write(JsonWriter out, SummaryResponseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SummaryResponseModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SummaryResponseModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SummaryResponseModel
   * @throws IOException if the JSON string is invalid with respect to SummaryResponseModel
   */
  public static SummaryResponseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SummaryResponseModel.class);
  }

  /**
   * Convert an instance of SummaryResponseModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

