/*
 * Flood API
 * This is a RESTful service that provides accurate and up-to-date flood information for the geographic region bounded by the following coordinates: `min_lon=-18.0`, `min_lat=-6.0`, `max_lon=52.0`, `max_lat=17.0`.<br/>The data are produced for the <a href='https://www.globalfloods.eu/'>Global Flood Awareness System</a> and sourced from the <a href='https://cds.climate.copernicus.eu/cdsapp#!/dataset/cems-glofas-forecast?tab=overview'>Copernicus Climate Data Store</a>. <br/>Please note that the datasets are licensed under the <a href='https://www.globalfloods.eu/terms-of-service/'>CEMS-FLOODS datasets licence</a>, which is not a standard open license. We use them in our pre-project to explore relevant data.
 *
 * The version of the OpenAPI document: 0.9.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.flood.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import io.openepi.flood.model.IntensityEnum;
import io.openepi.flood.model.PeakTimingEnum;
import io.openepi.flood.model.TendencyEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.flood.JSON;

/**
 * SummaryProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-24T13:54:08.842155+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class SummaryProperties {
  public static final String SERIALIZED_NAME_ISSUED_ON = "issued_on";
  @SerializedName(SERIALIZED_NAME_ISSUED_ON)
  private LocalDate issuedOn;

  public static final String SERIALIZED_NAME_PEAK_STEP = "peak_step";
  @SerializedName(SERIALIZED_NAME_PEAK_STEP)
  private Integer peakStep;

  public static final String SERIALIZED_NAME_PEAK_DAY = "peak_day";
  @SerializedName(SERIALIZED_NAME_PEAK_DAY)
  private LocalDate peakDay;

  public static final String SERIALIZED_NAME_PEAK_TIMING = "peak_timing";
  @SerializedName(SERIALIZED_NAME_PEAK_TIMING)
  private PeakTimingEnum peakTiming;

  public static final String SERIALIZED_NAME_MAX_MEDIAN_DIS = "max_median_dis";
  @SerializedName(SERIALIZED_NAME_MAX_MEDIAN_DIS)
  private BigDecimal maxMedianDis;

  public static final String SERIALIZED_NAME_MIN_MEDIAN_DIS = "min_median_dis";
  @SerializedName(SERIALIZED_NAME_MIN_MEDIAN_DIS)
  private BigDecimal minMedianDis;

  public static final String SERIALIZED_NAME_CONTROL_DIS = "control_dis";
  @SerializedName(SERIALIZED_NAME_CONTROL_DIS)
  private BigDecimal controlDis;

  public static final String SERIALIZED_NAME_MAX_MAX_DIS = "max_max_dis";
  @SerializedName(SERIALIZED_NAME_MAX_MAX_DIS)
  private BigDecimal maxMaxDis;

  public static final String SERIALIZED_NAME_MIN_MIN_DIS = "min_min_dis";
  @SerializedName(SERIALIZED_NAME_MIN_MIN_DIS)
  private BigDecimal minMinDis;

  public static final String SERIALIZED_NAME_TENDENCY = "tendency";
  @SerializedName(SERIALIZED_NAME_TENDENCY)
  private TendencyEnum tendency;

  public static final String SERIALIZED_NAME_MAX_P_ABOVE20Y = "max_p_above_20y";
  @SerializedName(SERIALIZED_NAME_MAX_P_ABOVE20Y)
  private BigDecimal maxPAbove20y;

  public static final String SERIALIZED_NAME_MAX_P_ABOVE5Y = "max_p_above_5y";
  @SerializedName(SERIALIZED_NAME_MAX_P_ABOVE5Y)
  private BigDecimal maxPAbove5y;

  public static final String SERIALIZED_NAME_MAX_P_ABOVE2Y = "max_p_above_2y";
  @SerializedName(SERIALIZED_NAME_MAX_P_ABOVE2Y)
  private BigDecimal maxPAbove2y;

  public static final String SERIALIZED_NAME_INTENSITY = "intensity";
  @SerializedName(SERIALIZED_NAME_INTENSITY)
  private IntensityEnum intensity;

  public SummaryProperties() {
  }

  public SummaryProperties issuedOn(LocalDate issuedOn) {
    this.issuedOn = issuedOn;
    return this;
  }

  /**
   * The date the summary forecast was issued on. The GloFAS hydrological model is run every day at 00:00 UTC.
   * @return issuedOn
   */
  @javax.annotation.Nonnull
  public LocalDate getIssuedOn() {
    return issuedOn;
  }

  public void setIssuedOn(LocalDate issuedOn) {
    this.issuedOn = issuedOn;
  }


  public SummaryProperties peakStep(Integer peakStep) {
    this.peakStep = peakStep;
    return this;
  }

  /**
   * The step number at which the peak occurs, ranging from 1 to 30.
   * minimum: 1
   * maximum: 30
   * @return peakStep
   */
  @javax.annotation.Nonnull
  public Integer getPeakStep() {
    return peakStep;
  }

  public void setPeakStep(Integer peakStep) {
    this.peakStep = peakStep;
  }


  public SummaryProperties peakDay(LocalDate peakDay) {
    this.peakDay = peakDay;
    return this;
  }

  /**
   * The date on which the flood peak is forecasted to occur, assuming UTC timezone.
   * @return peakDay
   */
  @javax.annotation.Nonnull
  public LocalDate getPeakDay() {
    return peakDay;
  }

  public void setPeakDay(LocalDate peakDay) {
    this.peakDay = peakDay;
  }


  public SummaryProperties peakTiming(PeakTimingEnum peakTiming) {
    this.peakTiming = peakTiming;
    return this;
  }

  /**
   * The timing of the flood peak indicated by border and grayed colors. BB: Black border, peak forecasted within days 1-3. GC: Grayed color, peak forecasted after day 10 with &lt;30% probability of exceeding the 2-year return period threshold in first 10 days. GB: Gray border, floods of some severity in first 10 days and peak after day 3.
   * @return peakTiming
   */
  @javax.annotation.Nonnull
  public PeakTimingEnum getPeakTiming() {
    return peakTiming;
  }

  public void setPeakTiming(PeakTimingEnum peakTiming) {
    this.peakTiming = peakTiming;
  }


  public SummaryProperties maxMedianDis(BigDecimal maxMedianDis) {
    this.maxMedianDis = maxMedianDis;
    return this;
  }

  /**
   * The maximum of the median discharges over the forecast horizon in m^3/s.
   * minimum: 0.0
   * @return maxMedianDis
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaxMedianDis() {
    return maxMedianDis;
  }

  public void setMaxMedianDis(BigDecimal maxMedianDis) {
    this.maxMedianDis = maxMedianDis;
  }


  public SummaryProperties minMedianDis(BigDecimal minMedianDis) {
    this.minMedianDis = minMedianDis;
    return this;
  }

  /**
   * The minimum of the median discharges over the forecast horizon in m^3/s.
   * minimum: 0.0
   * @return minMedianDis
   */
  @javax.annotation.Nonnull
  public BigDecimal getMinMedianDis() {
    return minMedianDis;
  }

  public void setMinMedianDis(BigDecimal minMedianDis) {
    this.minMedianDis = minMedianDis;
  }


  public SummaryProperties controlDis(BigDecimal controlDis) {
    this.controlDis = controlDis;
    return this;
  }

  /**
   * The control discharge in m^3/s. Currently taken to be the median discharge of the first day in forecasted.
   * minimum: 0.0
   * @return controlDis
   */
  @javax.annotation.Nonnull
  public BigDecimal getControlDis() {
    return controlDis;
  }

  public void setControlDis(BigDecimal controlDis) {
    this.controlDis = controlDis;
  }


  public SummaryProperties maxMaxDis(BigDecimal maxMaxDis) {
    this.maxMaxDis = maxMaxDis;
    return this;
  }

  /**
   * The maximum of the maximum discharges over the forecast horizon in m^3/s.
   * minimum: 0.0
   * @return maxMaxDis
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaxMaxDis() {
    return maxMaxDis;
  }

  public void setMaxMaxDis(BigDecimal maxMaxDis) {
    this.maxMaxDis = maxMaxDis;
  }


  public SummaryProperties minMinDis(BigDecimal minMinDis) {
    this.minMinDis = minMinDis;
    return this;
  }

  /**
   * The minimum of the minimum discharges over the forecast horizon in m^3/s.
   * minimum: 0.0
   * @return minMinDis
   */
  @javax.annotation.Nonnull
  public BigDecimal getMinMinDis() {
    return minMinDis;
  }

  public void setMinMinDis(BigDecimal minMinDis) {
    this.minMinDis = minMinDis;
  }


  public SummaryProperties tendency(TendencyEnum tendency) {
    this.tendency = tendency;
    return this;
  }

  /**
   * The flood tendency (indicated by shape) according to the evolution of flood intensity signal over the forecast horizon. U: Upward triangle, increasing trend over the next 30-days with 30-day max median exceeding initial (control) discharge by &gt;10%. D: Downward triangle, decreasing trend over the next 30-days with 30-day max median not exceeding initial discharge by &gt;10% and min median is &gt;&#x3D;10% below initial discharge. C: Circle, stagnant flow with no significant trend detected.
   * @return tendency
   */
  @javax.annotation.Nonnull
  public TendencyEnum getTendency() {
    return tendency;
  }

  public void setTendency(TendencyEnum tendency) {
    this.tendency = tendency;
  }


  public SummaryProperties maxPAbove20y(BigDecimal maxPAbove20y) {
    this.maxPAbove20y = maxPAbove20y;
    return this;
  }

  /**
   * The maximum probability of exceeding the 20-year return period threshold over the forecast horizon.
   * minimum: 0.0
   * maximum: 1.0
   * @return maxPAbove20y
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaxPAbove20y() {
    return maxPAbove20y;
  }

  public void setMaxPAbove20y(BigDecimal maxPAbove20y) {
    this.maxPAbove20y = maxPAbove20y;
  }


  public SummaryProperties maxPAbove5y(BigDecimal maxPAbove5y) {
    this.maxPAbove5y = maxPAbove5y;
    return this;
  }

  /**
   * The maximum probability of exceeding the 5-year return period threshold over the forecast horizon.
   * minimum: 0.0
   * maximum: 1.0
   * @return maxPAbove5y
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaxPAbove5y() {
    return maxPAbove5y;
  }

  public void setMaxPAbove5y(BigDecimal maxPAbove5y) {
    this.maxPAbove5y = maxPAbove5y;
  }


  public SummaryProperties maxPAbove2y(BigDecimal maxPAbove2y) {
    this.maxPAbove2y = maxPAbove2y;
    return this;
  }

  /**
   * The maximum probability of exceeding the 2-year return period threshold over the forecast horizon.
   * minimum: 0.0
   * maximum: 1.0
   * @return maxPAbove2y
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaxPAbove2y() {
    return maxPAbove2y;
  }

  public void setMaxPAbove2y(BigDecimal maxPAbove2y) {
    this.maxPAbove2y = maxPAbove2y;
  }


  public SummaryProperties intensity(IntensityEnum intensity) {
    this.intensity = intensity;
    return this;
  }

  /**
   * The flood intensity (indicated by color) relating to maximum return period threshold exceedance probabilities over the forecast horizon. P: Purple, maximum 20-year exceedance probability &gt;&#x3D;30%; R: Red, maximum for 20-year &lt;30% and 5-year &gt;&#x3D;30%; Y: Yellow, maximum for 5-year &lt;30% and 2-year &gt;&#x3D;30%; G: Gray, no flood signal (2-year &lt;30%).
   * @return intensity
   */
  @javax.annotation.Nonnull
  public IntensityEnum getIntensity() {
    return intensity;
  }

  public void setIntensity(IntensityEnum intensity) {
    this.intensity = intensity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SummaryProperties summaryProperties = (SummaryProperties) o;
    return Objects.equals(this.issuedOn, summaryProperties.issuedOn) &&
        Objects.equals(this.peakStep, summaryProperties.peakStep) &&
        Objects.equals(this.peakDay, summaryProperties.peakDay) &&
        Objects.equals(this.peakTiming, summaryProperties.peakTiming) &&
        Objects.equals(this.maxMedianDis, summaryProperties.maxMedianDis) &&
        Objects.equals(this.minMedianDis, summaryProperties.minMedianDis) &&
        Objects.equals(this.controlDis, summaryProperties.controlDis) &&
        Objects.equals(this.maxMaxDis, summaryProperties.maxMaxDis) &&
        Objects.equals(this.minMinDis, summaryProperties.minMinDis) &&
        Objects.equals(this.tendency, summaryProperties.tendency) &&
        Objects.equals(this.maxPAbove20y, summaryProperties.maxPAbove20y) &&
        Objects.equals(this.maxPAbove5y, summaryProperties.maxPAbove5y) &&
        Objects.equals(this.maxPAbove2y, summaryProperties.maxPAbove2y) &&
        Objects.equals(this.intensity, summaryProperties.intensity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issuedOn, peakStep, peakDay, peakTiming, maxMedianDis, minMedianDis, controlDis, maxMaxDis, minMinDis, tendency, maxPAbove20y, maxPAbove5y, maxPAbove2y, intensity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SummaryProperties {\n");
    sb.append("    issuedOn: ").append(toIndentedString(issuedOn)).append("\n");
    sb.append("    peakStep: ").append(toIndentedString(peakStep)).append("\n");
    sb.append("    peakDay: ").append(toIndentedString(peakDay)).append("\n");
    sb.append("    peakTiming: ").append(toIndentedString(peakTiming)).append("\n");
    sb.append("    maxMedianDis: ").append(toIndentedString(maxMedianDis)).append("\n");
    sb.append("    minMedianDis: ").append(toIndentedString(minMedianDis)).append("\n");
    sb.append("    controlDis: ").append(toIndentedString(controlDis)).append("\n");
    sb.append("    maxMaxDis: ").append(toIndentedString(maxMaxDis)).append("\n");
    sb.append("    minMinDis: ").append(toIndentedString(minMinDis)).append("\n");
    sb.append("    tendency: ").append(toIndentedString(tendency)).append("\n");
    sb.append("    maxPAbove20y: ").append(toIndentedString(maxPAbove20y)).append("\n");
    sb.append("    maxPAbove5y: ").append(toIndentedString(maxPAbove5y)).append("\n");
    sb.append("    maxPAbove2y: ").append(toIndentedString(maxPAbove2y)).append("\n");
    sb.append("    intensity: ").append(toIndentedString(intensity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issued_on");
    openapiFields.add("peak_step");
    openapiFields.add("peak_day");
    openapiFields.add("peak_timing");
    openapiFields.add("max_median_dis");
    openapiFields.add("min_median_dis");
    openapiFields.add("control_dis");
    openapiFields.add("max_max_dis");
    openapiFields.add("min_min_dis");
    openapiFields.add("tendency");
    openapiFields.add("max_p_above_20y");
    openapiFields.add("max_p_above_5y");
    openapiFields.add("max_p_above_2y");
    openapiFields.add("intensity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("issued_on");
    openapiRequiredFields.add("peak_step");
    openapiRequiredFields.add("peak_day");
    openapiRequiredFields.add("peak_timing");
    openapiRequiredFields.add("max_median_dis");
    openapiRequiredFields.add("min_median_dis");
    openapiRequiredFields.add("control_dis");
    openapiRequiredFields.add("max_max_dis");
    openapiRequiredFields.add("min_min_dis");
    openapiRequiredFields.add("tendency");
    openapiRequiredFields.add("max_p_above_20y");
    openapiRequiredFields.add("max_p_above_5y");
    openapiRequiredFields.add("max_p_above_2y");
    openapiRequiredFields.add("intensity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SummaryProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SummaryProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SummaryProperties is not found in the empty JSON string", SummaryProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SummaryProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SummaryProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SummaryProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `peak_timing`
      PeakTimingEnum.validateJsonElement(jsonObj.get("peak_timing"));
      // validate the required field `tendency`
      TendencyEnum.validateJsonElement(jsonObj.get("tendency"));
      // validate the required field `intensity`
      IntensityEnum.validateJsonElement(jsonObj.get("intensity"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SummaryProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SummaryProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SummaryProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SummaryProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SummaryProperties>() {
           @Override
           public void write(JsonWriter out, SummaryProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SummaryProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SummaryProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SummaryProperties
   * @throws IOException if the JSON string is invalid with respect to SummaryProperties
   */
  public static SummaryProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SummaryProperties.class);
  }

  /**
   * Convert an instance of SummaryProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

