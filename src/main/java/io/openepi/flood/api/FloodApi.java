/*
 * Flood API
 * This is a RESTful service that provides accurate and up-to-date flood information for the geographic region bounded by the following coordinates: `min_lon=-18.0`, `min_lat=-6.0`, `max_lon=52.0`, `max_lat=17.0`.<br/>The data are produced for the <a href='https://www.globalfloods.eu/'>Global Flood Awareness System</a> and sourced from the <a href='https://cds.climate.copernicus.eu/cdsapp#!/dataset/cems-glofas-forecast?tab=overview'>Copernicus Climate Data Store</a>. <br/>Please note that the datasets are licensed under the <a href='https://www.globalfloods.eu/terms-of-service/'>CEMS-FLOODS datasets licence</a>, which is not a standard open license. We use them in our pre-project to explore relevant data.
 *
 * The version of the OpenAPI document: 0.9.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.flood.api;

import io.openepi.flood.ApiClient;
import io.openepi.flood.Configuration;
import io.openepi.common.ApiCallback;
import io.openepi.common.ApiException;
import io.openepi.common.ApiResponse;
import io.openepi.common.Pair;


import com.google.gson.reflect.TypeToken;


import java.math.BigDecimal;
import io.openepi.flood.model.DetailedResponseModel;

import java.time.LocalDate;
import io.openepi.flood.model.SummaryResponseModel;
import io.openepi.flood.model.ThresholdResponseModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FloodApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FloodApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FloodApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for detailedDetailedGet
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @param startDate Inclusive lower bound for the range of dates to return data for. If omitted the date range will not have a lower bound (optional)
     * @param endDate Inclusive upper bound for the range of dates to return data for. If omitted the date range will not have an upper bound (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detailedDetailedGetCall(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors, LocalDate startDate, LocalDate endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/detailed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (minLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_lon", minLon));
        }

        if (maxLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_lon", maxLon));
        }

        if (minLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_lat", minLat));
        }

        if (maxLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_lat", maxLat));
        }

        if (includeNeighbors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_neighbors", includeNeighbors));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detailedDetailedGetValidateBeforeCall(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors, LocalDate startDate, LocalDate endDate, final ApiCallback _callback) throws ApiException {
        return detailedDetailedGetCall(lon, lat, minLon, maxLon, minLat, maxLat, includeNeighbors, startDate, endDate, _callback);

    }

    /**
     * Get detailed forecast for a location
     * Returns a detailed forecast of the next 30 days either for the cell at the given coordinates or for the cells within the given bounding box
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @param startDate Inclusive lower bound for the range of dates to return data for. If omitted the date range will not have a lower bound (optional)
     * @param endDate Inclusive upper bound for the range of dates to return data for. If omitted the date range will not have an upper bound (optional)
     * @return DetailedResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public DetailedResponseModel getDetailedForecast(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors, LocalDate startDate, LocalDate endDate) throws ApiException {
        ApiResponse<DetailedResponseModel> localVarResp = detailedDetailedGetWithHttpInfo(lon, lat, minLon, maxLon, minLat, maxLat, includeNeighbors, startDate, endDate);
        return localVarResp.getData();
    }


    /**
     * Get detailed forecast for a location
     * Returns a detailed forecast of the next 30 days either for the cell at the given coordinates or for the cells within the given bounding box
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @return DetailedResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetailedResponseModel getDetailedForecastSinglePoint(BigDecimal lon, BigDecimal lat, Boolean includeNeighbors) throws ApiException {
        return getDetailedForecast(lon, lat, null, null, null, null, includeNeighbors, null, null);
    }

    /**
     * Get detailed forecast for a location
     * Returns a detailed forecast of the next 30 days either for the cell at the given coordinates or for the cells within the given bounding box
     * @param minLon Minimum longitude (required)
     * @param maxLon Maximum longitude (required)
     * @param minLat Minimum latitude (required)
     * @param maxLat Maximum latitude (required)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @return DetailedResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetailedResponseModel getDetailedForecastBoundingBox(BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors) throws ApiException {
        return getDetailedForecast(null, null, minLon, maxLon, minLat, maxLat, includeNeighbors, null, null);
    }

    /**
     * Get detailed forecast for a location
     * Returns a detailed forecast of the next 30 days either for the cell at the given coordinates or for the cells within the given bounding box
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @param startDate Inclusive lower bound for the range of dates to return data for. If omitted the date range will not have a lower bound (optional)
     * @param endDate Inclusive upper bound for the range of dates to return data for. If omitted the date range will not have an upper bound (optional)
     * @return ApiResponse&lt;DetailedResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetailedResponseModel> detailedDetailedGetWithHttpInfo(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors, LocalDate startDate, LocalDate endDate) throws ApiException {
        okhttp3.Call localVarCall = detailedDetailedGetValidateBeforeCall(lon, lat, minLon, maxLon, minLat, maxLat, includeNeighbors, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<DetailedResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get detailed forecast for a location (asynchronously)
     * Returns a detailed forecast of the next 30 days either for the cell at the given coordinates or for the cells within the given bounding box
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @param startDate Inclusive lower bound for the range of dates to return data for. If omitted the date range will not have a lower bound (optional)
     * @param endDate Inclusive upper bound for the range of dates to return data for. If omitted the date range will not have an upper bound (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailedForecastAsync(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors, LocalDate startDate, LocalDate endDate, final ApiCallback<DetailedResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = detailedDetailedGetValidateBeforeCall(lon, lat, minLon, maxLon, minLat, maxLat, includeNeighbors, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<DetailedResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Get detailed forecast for a location point (asynchronously)
     * Returns a detailed forecast of the next 30 days for the cell at the given coordinates
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getDetailedForecastSinglePointAsync(BigDecimal lon, BigDecimal lat, Boolean includeNeighbors, final ApiCallback<DetailedResponseModel> _callback) throws ApiException {
        return getDetailedForecastAsync(lon, lat, null, null, null, null, includeNeighbors, null, null, _callback);
    }

    /**
     * Get detailed forecast for a bounding box (asynchronously)
     * Returns a detailed forecast of the next 30 days for the cells within the given bounding box
     * @param minLon Minimum longitude (required)
     * @param maxLon Maximum longitude (required)
     * @param minLat Minimum latitude (required)
     * @param maxLat Maximum latitude (required)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getDetailedForecastBoundingBoxAsync(BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors, final ApiCallback<DetailedResponseModel> _callback) throws ApiException {
        return getDetailedForecastAsync(null, null, minLon, maxLon, minLat, maxLat, includeNeighbors, null, null, _callback);
    }


    /**
     * Build call for summarySummaryGet
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call summarySummaryGetCall(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (minLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_lon", minLon));
        }

        if (maxLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_lon", maxLon));
        }

        if (minLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_lat", minLat));
        }

        if (maxLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_lat", maxLat));
        }

        if (includeNeighbors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_neighbors", includeNeighbors));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call summarySummaryGetValidateBeforeCall(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors, final ApiCallback _callback) throws ApiException {
        return summarySummaryGetCall(lon, lat, minLon, maxLon, minLat, maxLat, includeNeighbors, _callback);

    }

    /**
     * Get summary forecast for a location
     * Returns a summary forecast of the next 30 days either for the cell at the given coordinates or for the cells within the given bounding box
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @return SummaryResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SummaryResponseModel getForecastSummary(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors) throws ApiException {
        ApiResponse<SummaryResponseModel> localVarResp = summarySummaryGetWithHttpInfo(lon, lat, minLon, maxLon, minLat, maxLat, includeNeighbors);
        return localVarResp.getData();
    }

    /**
     * Get summary forecast for a single point location
     * Returns a summary forecast of the next 30 days for the cell at the given coordinates
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @return SummaryResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SummaryResponseModel getForecastSummarySinglePoint(BigDecimal lon, BigDecimal lat, Boolean includeNeighbors) throws ApiException {
        return getForecastSummary(lon, lat, null, null, null, null, includeNeighbors);
    }

    /**
     * Get summary forecast for a bounding box
     * Returns a summary forecast of the next 30 days for the cells within the given bounding box
     * @param minLon Minimum longitude (required)
     * @param maxLon Maximum longitude (required)
     * @param minLat Minimum latitude (required)
     * @param maxLat Maximum latitude (required)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @return SummaryResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SummaryResponseModel getForecastSummaryBoundingBox(BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors) throws ApiException {
        return getForecastSummary(null, null, minLon, maxLon, minLat, maxLat, includeNeighbors);
    }

    /**
     * Get summary forecast for a location
     * Returns a summary forecast of the next 30 days either for the cell at the given coordinates or for the cells within the given bounding box
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @return ApiResponse&lt;SummaryResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SummaryResponseModel> summarySummaryGetWithHttpInfo(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors) throws ApiException {
        okhttp3.Call localVarCall = summarySummaryGetValidateBeforeCall(lon, lat, minLon, maxLon, minLat, maxLat, includeNeighbors, null);
        Type localVarReturnType = new TypeToken<SummaryResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get summary forecast for a location (asynchronously)
     * Returns a summary forecast of the next 30 days either for the cell at the given coordinates or for the cells within the given bounding box
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getForecastSummaryAsync(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors, final ApiCallback<SummaryResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = summarySummaryGetValidateBeforeCall(lon, lat, minLon, maxLon, minLat, maxLat, includeNeighbors, _callback);
        Type localVarReturnType = new TypeToken<SummaryResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Get summary forecast for a location (asynchronously)
     * Returns a summary forecast of the next 30 days for the cell at the given coordinates
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     */
    public okhttp3.Call getForecastSummarySinglePointAsync(BigDecimal lon, BigDecimal lat, Boolean includeNeighbors, final ApiCallback<SummaryResponseModel> _callback) throws ApiException {
        return getForecastSummaryAsync(lon, lat, null, null, null, null, includeNeighbors, _callback);
    }

    /**
     * Get summary forecast for a bounding box (asynchronously)
     * Returns a summary forecast of the next 30 days for the cells within the given bounding box
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @param includeNeighbors Whether or not to include neighboring cells in the response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getForecastSummaryBoundingBoxAsync(BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, Boolean includeNeighbors, final ApiCallback<SummaryResponseModel> _callback) throws ApiException {
        return getForecastSummaryAsync(null, null, minLon, maxLon, minLat, maxLat, includeNeighbors, _callback);
    }

    /**
     * Build call for thresholdThresholdGet
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call thresholdThresholdGetCall(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/threshold";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (minLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_lon", minLon));
        }

        if (maxLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_lon", maxLon));
        }

        if (minLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_lat", minLat));
        }

        if (maxLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_lat", maxLat));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call thresholdThresholdGetValidateBeforeCall(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, final ApiCallback _callback) throws ApiException {
        return thresholdThresholdGetCall(lon, lat, minLon, maxLon, minLat, maxLat, _callback);

    }

    /**
     * Get return period thresholds for a location
     * Returns the 2-, 5-, and 20-year return period thresholds either for the cell at the given coordinates or for the cells within the given bounding box
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @return ThresholdResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ThresholdResponseModel getThreshold(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat) throws ApiException {
        ApiResponse<ThresholdResponseModel> localVarResp = thresholdThresholdGetWithHttpInfo(lon, lat, minLon, maxLon, minLat, maxLat);
        return localVarResp.getData();
    }

    /**
     * Get return period thresholds for a location
     * Returns the 2-, 5-, and 20-year return period thresholds for the cell at the given coordinates
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @return ThresholdResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ThresholdResponseModel getThresholdSinglePoint(BigDecimal lon, BigDecimal lat) throws ApiException {
        return getThreshold(lon, lat, null, null, null, null);
    }

    /**
     * Get return period thresholds for a location
     * Returns the 2-, 5-, and 20-year return period thresholds for the cells within the given bounding box
     * @param minLon Minimum longitude (required)
     * @param maxLon Maximum longitude (required)
     * @param minLat Minimum latitude (required)
     * @param maxLat Maximum latitude (required)
     * @return ThresholdResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ThresholdResponseModel getThresholdBoundingBox(BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat) throws ApiException {
        return getThreshold(null, null, minLon, maxLon, minLat, maxLat);
    }

    /**
     * Get return period thresholds for a location
     * Returns the 2-, 5-, and 20-year return period thresholds either for the cell at the given coordinates or for the cells within the given bounding box
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @return ApiResponse&lt;ThresholdResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThresholdResponseModel> thresholdThresholdGetWithHttpInfo(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat) throws ApiException {
        okhttp3.Call localVarCall = thresholdThresholdGetValidateBeforeCall(lon, lat, minLon, maxLon, minLat, maxLat, null);
        Type localVarReturnType = new TypeToken<ThresholdResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get return period thresholds for a location (asynchronously)
     * Returns the 2-, 5-, and 20-year return period thresholds either for the cell at the given coordinates or for the cells within the given bounding box
     * @param lon Longitude (optional)
     * @param lat Latitude (optional)
     * @param minLon Minimum longitude (optional)
     * @param maxLon Maximum longitude (optional)
     * @param minLat Minimum latitude (optional)
     * @param maxLat Maximum latitude (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThresholdAsync(BigDecimal lon, BigDecimal lat, BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, final ApiCallback<ThresholdResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = thresholdThresholdGetValidateBeforeCall(lon, lat, minLon, maxLon, minLat, maxLat, _callback);
        Type localVarReturnType = new TypeToken<ThresholdResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }


    /**
     * Get return period thresholds for a location (asynchronously)
     * Returns the 2-, 5-, and 20-year return period thresholds for the cell at the given coordinates
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getThresholdSinglePointAsync(BigDecimal lon, BigDecimal lat, final ApiCallback<ThresholdResponseModel> _callback) throws ApiException {
        return getThresholdAsync(lon, lat, null, null, null, null, _callback);
    }

    /**
     * Get return period thresholds for a location (asynchronously)
     * Returns the 2-, 5-, and 20-year return period thresholds for the cells within the given bounding box
     * @param minLon Minimum longitude (required)
     * @param maxLon Maximum longitude (required)
     * @param minLat Minimum latitude (required)
     * @param maxLat Maximum latitude (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getThresholdBoundingBoxAsync(BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, final ApiCallback<ThresholdResponseModel> _callback) throws ApiException {
        return getThresholdAsync(null, null, minLon, maxLon, minLat, maxLat, _callback);
    }
}
