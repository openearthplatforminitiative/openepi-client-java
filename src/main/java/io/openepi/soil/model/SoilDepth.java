/*
 * Soil API
 * This is a RESTful service that provides soil information based on data sourced from <a href=\"https://www.isric.org/explore/soilgrids\">SoilGrids</a>. <br/>The data are freely available for use under the <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0 license</a>.
 *
 * The version of the OpenAPI document: 0.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.soil.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.openepi.soil.model.DepthRange;
import io.openepi.soil.model.SoilDepthLabels;
import io.openepi.soil.model.SoilPropertyValues;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.soil.JSON;

/**
 * SoilDepth
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:23:35.781423+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class SoilDepth {
  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private DepthRange range;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private SoilDepthLabels label;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private SoilPropertyValues values;

  public SoilDepth() {
  }

  public SoilDepth range(DepthRange range) {
    this.range = range;
    return this;
  }

  /**
   * The soil depth range
   * @return range
   */
  @javax.annotation.Nonnull
  public DepthRange getRange() {
    return range;
  }

  public void setRange(DepthRange range) {
    this.range = range;
  }


  public SoilDepth label(SoilDepthLabels label) {
    this.label = label;
    return this;
  }

  /**
   * The soil depth label
   * @return label
   */
  @javax.annotation.Nonnull
  public SoilDepthLabels getLabel() {
    return label;
  }

  public void setLabel(SoilDepthLabels label) {
    this.label = label;
  }


  public SoilDepth values(SoilPropertyValues values) {
    this.values = values;
    return this;
  }

  /**
   * The queried soil property values
   * @return values
   */
  @javax.annotation.Nonnull
  public SoilPropertyValues getValues() {
    return values;
  }

  public void setValues(SoilPropertyValues values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoilDepth soilDepth = (SoilDepth) o;
    return Objects.equals(this.range, soilDepth.range) &&
        Objects.equals(this.label, soilDepth.label) &&
        Objects.equals(this.values, soilDepth.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(range, label, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoilDepth {\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("range");
    openapiFields.add("label");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("range");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("values");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoilDepth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoilDepth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoilDepth is not found in the empty JSON string", SoilDepth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoilDepth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoilDepth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SoilDepth.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `range`
      DepthRange.validateJsonElement(jsonObj.get("range"));
      // validate the required field `label`
      SoilDepthLabels.validateJsonElement(jsonObj.get("label"));
      // validate the required field `values`
      SoilPropertyValues.validateJsonElement(jsonObj.get("values"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoilDepth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoilDepth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoilDepth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoilDepth.class));

       return (TypeAdapter<T>) new TypeAdapter<SoilDepth>() {
           @Override
           public void write(JsonWriter out, SoilDepth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoilDepth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoilDepth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoilDepth
   * @throws IOException if the JSON string is invalid with respect to SoilDepth
   */
  public static SoilDepth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoilDepth.class);
  }

  /**
   * Convert an instance of SoilDepth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

