/*
 * Soil API
 * This is a RESTful service that provides soil information based on data sourced from <a href=\"https://www.isric.org/explore/soilgrids\">SoilGrids</a>. <br/>The data are freely available for use under the <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0 license</a>.
 *
 * The version of the OpenAPI document: 0.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.soil.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.soil.JSON;

/**
 * SoilPropertyValues
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:23:35.781423+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class SoilPropertyValues {
  public static final String SERIALIZED_NAME_MEAN = "mean";
  @SerializedName(SERIALIZED_NAME_MEAN)
  private BigDecimal mean;

  public static final String SERIALIZED_NAME_Q005 = "Q0.05";
  @SerializedName(SERIALIZED_NAME_Q005)
  private BigDecimal Q0_05;

  public static final String SERIALIZED_NAME_Q05 = "Q0.5";
  @SerializedName(SERIALIZED_NAME_Q05)
  private BigDecimal Q0_5;

  public static final String SERIALIZED_NAME_Q095 = "Q0.95";
  @SerializedName(SERIALIZED_NAME_Q095)
  private BigDecimal Q0_95;

  public static final String SERIALIZED_NAME_UNCERTAINTY = "uncertainty";
  @SerializedName(SERIALIZED_NAME_UNCERTAINTY)
  private BigDecimal uncertainty;

  public SoilPropertyValues() {
  }

  public SoilPropertyValues mean(BigDecimal mean) {
    this.mean = mean;
    return this;
  }

  /**
   * Get mean
   * @return mean
   */
  @javax.annotation.Nullable
  public BigDecimal getMean() {
    return mean;
  }

  public void setMean(BigDecimal mean) {
    this.mean = mean;
  }


  public SoilPropertyValues Q0_05(BigDecimal Q0_05) {
    this.Q0_05 = Q0_05;
    return this;
  }

  /**
   * Get Q0_05
   * @return Q0_05
   */
  @javax.annotation.Nullable
  public BigDecimal getQ005() {
    return Q0_05;
  }

  public void setQ005(BigDecimal Q0_05) {
    this.Q0_05 = Q0_05;
  }


  public SoilPropertyValues Q0_5(BigDecimal Q0_5) {
    this.Q0_5 = Q0_5;
    return this;
  }

  /**
   * Get Q0_5
   * @return Q0_5
   */
  @javax.annotation.Nullable
  public BigDecimal getQ05() {
    return Q0_5;
  }

  public void setQ05(BigDecimal Q0_5) {
    this.Q0_5 = Q0_5;
  }


  public SoilPropertyValues Q0_95(BigDecimal Q0_95) {
    this.Q0_95 = Q0_95;
    return this;
  }

  /**
   * Get Q0_95
   * @return Q0_95
   */
  @javax.annotation.Nullable
  public BigDecimal getQ095() {
    return Q0_95;
  }

  public void setQ095(BigDecimal Q0_95) {
    this.Q0_95 = Q0_95;
  }


  public SoilPropertyValues uncertainty(BigDecimal uncertainty) {
    this.uncertainty = uncertainty;
    return this;
  }

  /**
   * Get uncertainty
   * @return uncertainty
   */
  @javax.annotation.Nullable
  public BigDecimal getUncertainty() {
    return uncertainty;
  }

  public void setUncertainty(BigDecimal uncertainty) {
    this.uncertainty = uncertainty;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoilPropertyValues soilPropertyValues = (SoilPropertyValues) o;
    return Objects.equals(this.mean, soilPropertyValues.mean) &&
        Objects.equals(this.Q0_05, soilPropertyValues.Q0_05) &&
        Objects.equals(this.Q0_5, soilPropertyValues.Q0_5) &&
        Objects.equals(this.Q0_95, soilPropertyValues.Q0_95) &&
        Objects.equals(this.uncertainty, soilPropertyValues.uncertainty);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(mean, Q0_05, Q0_5, Q0_95, uncertainty);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoilPropertyValues {\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("    Q0_05: ").append(toIndentedString(Q0_05)).append("\n");
    sb.append("    Q0_5: ").append(toIndentedString(Q0_5)).append("\n");
    sb.append("    Q0_95: ").append(toIndentedString(Q0_95)).append("\n");
    sb.append("    uncertainty: ").append(toIndentedString(uncertainty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mean");
    openapiFields.add("Q0.05");
    openapiFields.add("Q0.5");
    openapiFields.add("Q0.95");
    openapiFields.add("uncertainty");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoilPropertyValues
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoilPropertyValues.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoilPropertyValues is not found in the empty JSON string", SoilPropertyValues.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoilPropertyValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoilPropertyValues` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoilPropertyValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoilPropertyValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoilPropertyValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoilPropertyValues.class));

       return (TypeAdapter<T>) new TypeAdapter<SoilPropertyValues>() {
           @Override
           public void write(JsonWriter out, SoilPropertyValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoilPropertyValues read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoilPropertyValues given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoilPropertyValues
   * @throws IOException if the JSON string is invalid with respect to SoilPropertyValues
   */
  public static SoilPropertyValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoilPropertyValues.class);
  }

  /**
   * Convert an instance of SoilPropertyValues to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

