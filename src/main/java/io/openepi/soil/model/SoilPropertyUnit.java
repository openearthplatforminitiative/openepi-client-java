/*
 * Soil API
 * This is a RESTful service that provides soil information based on data sourced from <a href=\"https://www.isric.org/explore/soilgrids\">SoilGrids</a>. <br/>The data are freely available for use under the <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0 license</a>.
 *
 * The version of the OpenAPI document: 0.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.soil.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.openepi.soil.model.SoilConversionFactors;
import io.openepi.soil.model.SoilMappedUnits;
import io.openepi.soil.model.SoilTargetUnits;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.soil.JSON;

/**
 * SoilPropertyUnit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:23:35.781423+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class SoilPropertyUnit {
  public static final String SERIALIZED_NAME_CONVERSION_FACTOR = "conversion_factor";
  @SerializedName(SERIALIZED_NAME_CONVERSION_FACTOR)
  private SoilConversionFactors conversionFactor;

  public static final String SERIALIZED_NAME_MAPPED_UNITS = "mapped_units";
  @SerializedName(SERIALIZED_NAME_MAPPED_UNITS)
  private SoilMappedUnits mappedUnits;

  public static final String SERIALIZED_NAME_TARGET_UNITS = "target_units";
  @SerializedName(SERIALIZED_NAME_TARGET_UNITS)
  private SoilTargetUnits targetUnits;

  public static final String SERIALIZED_NAME_UNCERTAINTY_UNIT = "uncertainty_unit";
  @SerializedName(SERIALIZED_NAME_UNCERTAINTY_UNIT)
  private String uncertaintyUnit;

  public SoilPropertyUnit() {
  }

  public SoilPropertyUnit conversionFactor(SoilConversionFactors conversionFactor) {
    this.conversionFactor = conversionFactor;
    return this;
  }

  /**
   * The conversion factor
   * @return conversionFactor
   */
  @javax.annotation.Nonnull
  public SoilConversionFactors getConversionFactor() {
    return conversionFactor;
  }

  public void setConversionFactor(SoilConversionFactors conversionFactor) {
    this.conversionFactor = conversionFactor;
  }


  public SoilPropertyUnit mappedUnits(SoilMappedUnits mappedUnits) {
    this.mappedUnits = mappedUnits;
    return this;
  }

  /**
   * The mapped unit of the soil property
   * @return mappedUnits
   */
  @javax.annotation.Nonnull
  public SoilMappedUnits getMappedUnits() {
    return mappedUnits;
  }

  public void setMappedUnits(SoilMappedUnits mappedUnits) {
    this.mappedUnits = mappedUnits;
  }


  public SoilPropertyUnit targetUnits(SoilTargetUnits targetUnits) {
    this.targetUnits = targetUnits;
    return this;
  }

  /**
   * The target unit of the soil property
   * @return targetUnits
   */
  @javax.annotation.Nonnull
  public SoilTargetUnits getTargetUnits() {
    return targetUnits;
  }

  public void setTargetUnits(SoilTargetUnits targetUnits) {
    this.targetUnits = targetUnits;
  }


  public SoilPropertyUnit uncertaintyUnit(String uncertaintyUnit) {
    this.uncertaintyUnit = uncertaintyUnit;
    return this;
  }

  /**
   * The unit of the uncertainty
   * @return uncertaintyUnit
   */
  @javax.annotation.Nonnull
  public String getUncertaintyUnit() {
    return uncertaintyUnit;
  }

  public void setUncertaintyUnit(String uncertaintyUnit) {
    this.uncertaintyUnit = uncertaintyUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoilPropertyUnit soilPropertyUnit = (SoilPropertyUnit) o;
    return Objects.equals(this.conversionFactor, soilPropertyUnit.conversionFactor) &&
        Objects.equals(this.mappedUnits, soilPropertyUnit.mappedUnits) &&
        Objects.equals(this.targetUnits, soilPropertyUnit.targetUnits) &&
        Objects.equals(this.uncertaintyUnit, soilPropertyUnit.uncertaintyUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversionFactor, mappedUnits, targetUnits, uncertaintyUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoilPropertyUnit {\n");
    sb.append("    conversionFactor: ").append(toIndentedString(conversionFactor)).append("\n");
    sb.append("    mappedUnits: ").append(toIndentedString(mappedUnits)).append("\n");
    sb.append("    targetUnits: ").append(toIndentedString(targetUnits)).append("\n");
    sb.append("    uncertaintyUnit: ").append(toIndentedString(uncertaintyUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversion_factor");
    openapiFields.add("mapped_units");
    openapiFields.add("target_units");
    openapiFields.add("uncertainty_unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("conversion_factor");
    openapiRequiredFields.add("mapped_units");
    openapiRequiredFields.add("target_units");
    openapiRequiredFields.add("uncertainty_unit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoilPropertyUnit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoilPropertyUnit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoilPropertyUnit is not found in the empty JSON string", SoilPropertyUnit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoilPropertyUnit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoilPropertyUnit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SoilPropertyUnit.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `conversion_factor`
      SoilConversionFactors.validateJsonElement(jsonObj.get("conversion_factor"));
      // validate the required field `mapped_units`
      SoilMappedUnits.validateJsonElement(jsonObj.get("mapped_units"));
      // validate the required field `target_units`
      SoilTargetUnits.validateJsonElement(jsonObj.get("target_units"));
      if (!jsonObj.get("uncertainty_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uncertainty_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uncertainty_unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoilPropertyUnit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoilPropertyUnit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoilPropertyUnit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoilPropertyUnit.class));

       return (TypeAdapter<T>) new TypeAdapter<SoilPropertyUnit>() {
           @Override
           public void write(JsonWriter out, SoilPropertyUnit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoilPropertyUnit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoilPropertyUnit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoilPropertyUnit
   * @throws IOException if the JSON string is invalid with respect to SoilPropertyUnit
   */
  public static SoilPropertyUnit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoilPropertyUnit.class);
  }

  /**
   * Convert an instance of SoilPropertyUnit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

