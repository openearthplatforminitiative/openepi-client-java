/*
 * Soil API
 * This is a RESTful service that provides soil information based on data sourced from <a href=\"https://www.isric.org/explore/soilgrids\">SoilGrids</a>. <br/>The data are freely available for use under the <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0 license</a>.
 *
 * The version of the OpenAPI document: 0.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.soil.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import io.openepi.soil.model.SoilDepth;
import io.openepi.soil.model.SoilPropertiesCodes;
import io.openepi.soil.model.SoilPropertyUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.soil.JSON;

/**
 * SoilLayer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:23:35.781423+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class SoilLayer {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private SoilPropertiesCodes code;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UNIT_MEASURE = "unit_measure";
  @SerializedName(SERIALIZED_NAME_UNIT_MEASURE)
  private SoilPropertyUnit unitMeasure;

  public static final String SERIALIZED_NAME_DEPTHS = "depths";
  @SerializedName(SERIALIZED_NAME_DEPTHS)
  private List<SoilDepth> depths = new ArrayList<>();

  public SoilLayer() {
  }

  public SoilLayer code(SoilPropertiesCodes code) {
    this.code = code;
    return this;
  }

  /**
   * The soil property code
   * @return code
   */
  @javax.annotation.Nonnull
  public SoilPropertiesCodes getCode() {
    return code;
  }

  public void setCode(SoilPropertiesCodes code) {
    this.code = code;
  }


  public SoilLayer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the soil property
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SoilLayer unitMeasure(SoilPropertyUnit unitMeasure) {
    this.unitMeasure = unitMeasure;
    return this;
  }

  /**
   * The unit of the soil property
   * @return unitMeasure
   */
  @javax.annotation.Nonnull
  public SoilPropertyUnit getUnitMeasure() {
    return unitMeasure;
  }

  public void setUnitMeasure(SoilPropertyUnit unitMeasure) {
    this.unitMeasure = unitMeasure;
  }


  public SoilLayer depths(List<SoilDepth> depths) {
    this.depths = depths;
    return this;
  }

  public SoilLayer addDepthsItem(SoilDepth depthsItem) {
    if (this.depths == null) {
      this.depths = new ArrayList<>();
    }
    this.depths.add(depthsItem);
    return this;
  }

  /**
   * The queried soil depths with values
   * @return depths
   */
  @javax.annotation.Nonnull
  public List<SoilDepth> getDepths() {
    return depths;
  }

  public void setDepths(List<SoilDepth> depths) {
    this.depths = depths;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoilLayer soilLayer = (SoilLayer) o;
    return Objects.equals(this.code, soilLayer.code) &&
        Objects.equals(this.name, soilLayer.name) &&
        Objects.equals(this.unitMeasure, soilLayer.unitMeasure) &&
        Objects.equals(this.depths, soilLayer.depths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, name, unitMeasure, depths);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoilLayer {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    unitMeasure: ").append(toIndentedString(unitMeasure)).append("\n");
    sb.append("    depths: ").append(toIndentedString(depths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("name");
    openapiFields.add("unit_measure");
    openapiFields.add("depths");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("unit_measure");
    openapiRequiredFields.add("depths");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoilLayer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoilLayer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoilLayer is not found in the empty JSON string", SoilLayer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoilLayer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoilLayer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SoilLayer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `code`
      SoilPropertiesCodes.validateJsonElement(jsonObj.get("code"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `unit_measure`
      SoilPropertyUnit.validateJsonElement(jsonObj.get("unit_measure"));
      // ensure the json data is an array
      if (!jsonObj.get("depths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `depths` to be an array in the JSON string but got `%s`", jsonObj.get("depths").toString()));
      }

      JsonArray jsonArraydepths = jsonObj.getAsJsonArray("depths");
      // validate the required field `depths` (array)
      for (int i = 0; i < jsonArraydepths.size(); i++) {
        SoilDepth.validateJsonElement(jsonArraydepths.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoilLayer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoilLayer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoilLayer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoilLayer.class));

       return (TypeAdapter<T>) new TypeAdapter<SoilLayer>() {
           @Override
           public void write(JsonWriter out, SoilLayer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoilLayer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoilLayer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoilLayer
   * @throws IOException if the JSON string is invalid with respect to SoilLayer
   */
  public static SoilLayer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoilLayer.class);
  }

  /**
   * Convert an instance of SoilLayer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

