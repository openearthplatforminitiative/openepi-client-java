/*
 * Soil API
 * This is a RESTful service that provides soil information based on data sourced from <a href=\"https://www.isric.org/explore/soilgrids\">SoilGrids</a>. <br/>The data are freely available for use under the <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0 license</a>.
 *
 * The version of the OpenAPI document: 0.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.soil.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.openepi.soil.model.SoilDepths;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openepi.soil.JSON;

/**
 * DepthRange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T14:23:35.781423+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class DepthRange {
  public static final String SERIALIZED_NAME_TOP_DEPTH = "top_depth";
  @SerializedName(SERIALIZED_NAME_TOP_DEPTH)
  private SoilDepths topDepth;

  public static final String SERIALIZED_NAME_BOTTOM_DEPTH = "bottom_depth";
  @SerializedName(SERIALIZED_NAME_BOTTOM_DEPTH)
  private SoilDepths bottomDepth;

  public static final String SERIALIZED_NAME_UNIT_DEPTH = "unit_depth";
  @SerializedName(SERIALIZED_NAME_UNIT_DEPTH)
  private Object unitDepth;

  public DepthRange() {
  }

  public DepthRange topDepth(SoilDepths topDepth) {
    this.topDepth = topDepth;
    return this;
  }

  /**
   * The top depth
   * @return topDepth
   */
  @javax.annotation.Nonnull
  public SoilDepths getTopDepth() {
    return topDepth;
  }

  public void setTopDepth(SoilDepths topDepth) {
    this.topDepth = topDepth;
  }


  public DepthRange bottomDepth(SoilDepths bottomDepth) {
    this.bottomDepth = bottomDepth;
    return this;
  }

  /**
   * The bottom depth
   * @return bottomDepth
   */
  @javax.annotation.Nonnull
  public SoilDepths getBottomDepth() {
    return bottomDepth;
  }

  public void setBottomDepth(SoilDepths bottomDepth) {
    this.bottomDepth = bottomDepth;
  }


  public DepthRange unitDepth(Object unitDepth) {
    this.unitDepth = unitDepth;
    return this;
  }

  /**
   * The unit of the depth range
   * @return unitDepth
   */
  @javax.annotation.Nullable
  public Object getUnitDepth() {
    return unitDepth;
  }

  public void setUnitDepth(Object unitDepth) {
    this.unitDepth = unitDepth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepthRange depthRange = (DepthRange) o;
    return Objects.equals(this.topDepth, depthRange.topDepth) &&
        Objects.equals(this.bottomDepth, depthRange.bottomDepth) &&
        Objects.equals(this.unitDepth, depthRange.unitDepth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(topDepth, bottomDepth, unitDepth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepthRange {\n");
    sb.append("    topDepth: ").append(toIndentedString(topDepth)).append("\n");
    sb.append("    bottomDepth: ").append(toIndentedString(bottomDepth)).append("\n");
    sb.append("    unitDepth: ").append(toIndentedString(unitDepth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("top_depth");
    openapiFields.add("bottom_depth");
    openapiFields.add("unit_depth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("top_depth");
    openapiRequiredFields.add("bottom_depth");
    openapiRequiredFields.add("unit_depth");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DepthRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DepthRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DepthRange is not found in the empty JSON string", DepthRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DepthRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DepthRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DepthRange.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `top_depth`
      SoilDepths.validateJsonElement(jsonObj.get("top_depth"));
      // validate the required field `bottom_depth`
      SoilDepths.validateJsonElement(jsonObj.get("bottom_depth"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DepthRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DepthRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DepthRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DepthRange.class));

       return (TypeAdapter<T>) new TypeAdapter<DepthRange>() {
           @Override
           public void write(JsonWriter out, DepthRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DepthRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DepthRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DepthRange
   * @throws IOException if the JSON string is invalid with respect to DepthRange
   */
  public static DepthRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DepthRange.class);
  }

  /**
   * Convert an instance of DepthRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

