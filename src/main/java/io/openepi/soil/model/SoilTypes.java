/*
 * Soil API
 * This is a RESTful service that provides soil information based on data sourced from <a href=\"https://www.isric.org/explore/soilgrids\">SoilGrids</a>. <br/>The data are freely available for use under the <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0 license</a>.
 *
 * The version of the OpenAPI document: 0.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.soil.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets SoilTypes
 */
@JsonAdapter(SoilTypes.Adapter.class)
public enum SoilTypes {
  
  ACRISOLS("Acrisols"),
  
  ALBELUVISOLS("Albeluvisols"),
  
  ALISOLS("Alisols"),
  
  ANDOSOLS("Andosols"),
  
  ARENOSOLS("Arenosols"),
  
  CALCISOLS("Calcisols"),
  
  CAMBISOLS("Cambisols"),
  
  CHERNOZEMS("Chernozems"),
  
  CRYOSOLS("Cryosols"),
  
  DURISOLS("Durisols"),
  
  FERRALSOLS("Ferralsols"),
  
  FLUVISOLS("Fluvisols"),
  
  GLEYSOLS("Gleysols"),
  
  GYPSISOLS("Gypsisols"),
  
  HISTOSOLS("Histosols"),
  
  KASTANOZEMS("Kastanozems"),
  
  LEPTOSOLS("Leptosols"),
  
  LIXISOLS("Lixisols"),
  
  LUVISOLS("Luvisols"),
  
  NITISOLS("Nitisols"),
  
  PHAEOZEMS("Phaeozems"),
  
  PLANOSOLS("Planosols"),
  
  PLINTHOSOLS("Plinthosols"),
  
  PODZOLS("Podzols"),
  
  REGOSOLS("Regosols"),
  
  SOLONCHAKS("Solonchaks"),
  
  SOLONETZ("Solonetz"),
  
  STAGNOSOLS("Stagnosols"),
  
  UMBRISOLS("Umbrisols"),
  
  VERTISOLS("Vertisols"),
  
  NO_INFORMATION("No information");

  private String value;

  SoilTypes(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static SoilTypes fromValue(String value) {
    for (SoilTypes b : SoilTypes.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<SoilTypes> {
    @Override
    public void write(final JsonWriter jsonWriter, final SoilTypes enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public SoilTypes read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return SoilTypes.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    SoilTypes.fromValue(value);
  }
}

