/*
 * Soil API
 * This is a RESTful service that provides soil information based on data sourced from <a href=\"https://www.isric.org/explore/soilgrids\">SoilGrids</a>. <br/>The data are freely available for use under the <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0 license</a>.
 *
 * The version of the OpenAPI document: 0.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.soil.api;

import io.openepi.common.ApiCallback;
import io.openepi.soil.ApiClient;
import io.openepi.common.ApiException;
import io.openepi.common.ApiResponse;
import io.openepi.soil.Configuration;
import io.openepi.common.Pair;

import com.google.gson.reflect.TypeToken;


import java.math.BigDecimal;

import io.openepi.soil.model.SoilDepthLabels;
import io.openepi.soil.model.SoilPropertiesCodes;
import io.openepi.soil.model.SoilPropertyJSON;
import io.openepi.soil.model.SoilPropertyValueTypes;
import io.openepi.soil.model.SoilTypeJSON;
import io.openepi.soil.model.SoilTypeSummaryJSON;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SoilApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SoilApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SoilApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSoilPropertyPropertyGet
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param depths List of depths to include in the query. (required)
     * @param properties List of soil properties to include in the query. (required)
     * @param values List of values to include in the query. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoilPropertyPropertyGetCall(BigDecimal lon, BigDecimal lat, List<SoilDepthLabels> depths, List<SoilPropertiesCodes> properties, List<SoilPropertyValueTypes> values, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/property";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (depths != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "depths", depths));
        }

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        if (values != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "values", values));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSoilPropertyPropertyGetValidateBeforeCall(BigDecimal lon, BigDecimal lat, List<SoilDepthLabels> depths, List<SoilPropertiesCodes> properties, List<SoilPropertyValueTypes> values, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getSoilPropertyPropertyGet(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getSoilPropertyPropertyGet(Async)");
        }

        // verify the required parameter 'depths' is set
        if (depths == null) {
            throw new ApiException("Missing the required parameter 'depths' when calling getSoilPropertyPropertyGet(Async)");
        }

        // verify the required parameter 'properties' is set
        if (properties == null) {
            throw new ApiException("Missing the required parameter 'properties' when calling getSoilPropertyPropertyGet(Async)");
        }

        // verify the required parameter 'values' is set
        if (values == null) {
            throw new ApiException("Missing the required parameter 'values' when calling getSoilPropertyPropertyGet(Async)");
        }

        return getSoilPropertyPropertyGetCall(lon, lat, depths, properties, values, _callback);

    }

    /**
     * Get soil property
     * Returns the values of the soil properties for the given location and depths. Note: The ocs property is only available for the 0-30cm depth and vice versa. If the depth and property are incompatible, the response will not include the property.
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param depths List of depths to include in the query. (required)
     * @param properties List of soil properties to include in the query. (required)
     * @param values List of values to include in the query. (required)
     * @return SoilPropertyJSON
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SoilPropertyJSON getSoilProperty(BigDecimal lon, BigDecimal lat, List<SoilDepthLabels> depths, List<SoilPropertiesCodes> properties, List<SoilPropertyValueTypes> values) throws ApiException {
        ApiResponse<SoilPropertyJSON> localVarResp = getSoilPropertyPropertyGetWithHttpInfo(lon, lat, depths, properties, values);
        return localVarResp.getData();
    }

    /**
     * Get soil property
     * Returns the values of the soil properties for the given location and depths. Note: The ocs property is only available for the 0-30cm depth and vice versa. If the depth and property are incompatible, the response will not include the property.
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param depths List of depths to include in the query. (required)
     * @param properties List of soil properties to include in the query. (required)
     * @param values List of values to include in the query. (required)
     * @return ApiResponse&lt;SoilPropertyJSON&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SoilPropertyJSON> getSoilPropertyPropertyGetWithHttpInfo(BigDecimal lon, BigDecimal lat, List<SoilDepthLabels> depths, List<SoilPropertiesCodes> properties, List<SoilPropertyValueTypes> values) throws ApiException {
        okhttp3.Call localVarCall = getSoilPropertyPropertyGetValidateBeforeCall(lon, lat, depths, properties, values, null);
        Type localVarReturnType = new TypeToken<SoilPropertyJSON>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get soil property (asynchronously)
     * Returns the values of the soil properties for the given location and depths. Note: The ocs property is only available for the 0-30cm depth and vice versa. If the depth and property are incompatible, the response will not include the property.
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param depths List of depths to include in the query. (required)
     * @param properties List of soil properties to include in the query. (required)
     * @param values List of values to include in the query. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoilPropertyAsync(BigDecimal lon, BigDecimal lat, List<SoilDepthLabels> depths, List<SoilPropertiesCodes> properties, List<SoilPropertyValueTypes> values, final ApiCallback<SoilPropertyJSON> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSoilPropertyPropertyGetValidateBeforeCall(lon, lat, depths, properties, values, _callback);
        Type localVarReturnType = new TypeToken<SoilPropertyJSON>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSoilTypeSummaryTypeSummaryGet
     * @param minLon Minimum longitude (required)
     * @param maxLon Maximum longitude (required)
     * @param minLat Minimum latitude (required)
     * @param maxLat Maximum latitude (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoilTypeSummaryTypeSummaryGetCall(BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/type/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_lon", minLon));
        }

        if (maxLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_lon", maxLon));
        }

        if (minLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_lat", minLat));
        }

        if (maxLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_lat", maxLat));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSoilTypeSummaryTypeSummaryGetValidateBeforeCall(BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'minLon' is set
        if (minLon == null) {
            throw new ApiException("Missing the required parameter 'minLon' when calling getSoilTypeSummaryTypeSummaryGet(Async)");
        }

        // verify the required parameter 'maxLon' is set
        if (maxLon == null) {
            throw new ApiException("Missing the required parameter 'maxLon' when calling getSoilTypeSummaryTypeSummaryGet(Async)");
        }

        // verify the required parameter 'minLat' is set
        if (minLat == null) {
            throw new ApiException("Missing the required parameter 'minLat' when calling getSoilTypeSummaryTypeSummaryGet(Async)");
        }

        // verify the required parameter 'maxLat' is set
        if (maxLat == null) {
            throw new ApiException("Missing the required parameter 'maxLat' when calling getSoilTypeSummaryTypeSummaryGet(Async)");
        }

        return getSoilTypeSummaryTypeSummaryGetCall(minLon, maxLon, minLat, maxLat, _callback);

    }

    /**
     * Get soil type summary
     * Returns the summary of the soil types present in the given bounding box, represented by a mapping of each soil type to the number of occurrences in the bounding box
     * @param minLon Minimum longitude (required)
     * @param maxLon Maximum longitude (required)
     * @param minLat Minimum latitude (required)
     * @param maxLat Maximum latitude (required)
     * @return SoilTypeSummaryJSON
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SoilTypeSummaryJSON getSoilTypeSummary(BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat) throws ApiException {
        ApiResponse<SoilTypeSummaryJSON> localVarResp = getSoilTypeSummaryTypeSummaryGetWithHttpInfo(minLon, maxLon, minLat, maxLat);
        return localVarResp.getData();
    }

    /**
     * Get soil type summary
     * Returns the summary of the soil types present in the given bounding box, represented by a mapping of each soil type to the number of occurrences in the bounding box
     * @param minLon Minimum longitude (required)
     * @param maxLon Maximum longitude (required)
     * @param minLat Minimum latitude (required)
     * @param maxLat Maximum latitude (required)
     * @return ApiResponse&lt;SoilTypeSummaryJSON&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SoilTypeSummaryJSON> getSoilTypeSummaryTypeSummaryGetWithHttpInfo(BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat) throws ApiException {
        okhttp3.Call localVarCall = getSoilTypeSummaryTypeSummaryGetValidateBeforeCall(minLon, maxLon, minLat, maxLat, null);
        Type localVarReturnType = new TypeToken<SoilTypeSummaryJSON>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get soil type summary (asynchronously)
     * Returns the summary of the soil types present in the given bounding box, represented by a mapping of each soil type to the number of occurrences in the bounding box
     * @param minLon Minimum longitude (required)
     * @param maxLon Maximum longitude (required)
     * @param minLat Minimum latitude (required)
     * @param maxLat Maximum latitude (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoilTypeSummaryAsync(BigDecimal minLon, BigDecimal maxLon, BigDecimal minLat, BigDecimal maxLat, final ApiCallback<SoilTypeSummaryJSON> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSoilTypeSummaryTypeSummaryGetValidateBeforeCall(minLon, maxLon, minLat, maxLat, _callback);
        Type localVarReturnType = new TypeToken<SoilTypeSummaryJSON>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSoilTypeTypeGet
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param topK Number of most probable soil types that will be returned, sorted by probability in descending order (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoilTypeTypeGetCall(BigDecimal lon, BigDecimal lat, Integer topK, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (topK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top_k", topK));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSoilTypeTypeGetValidateBeforeCall(BigDecimal lon, BigDecimal lat, Integer topK, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getSoilTypeTypeGet(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getSoilTypeTypeGet(Async)");
        }

        return getSoilTypeTypeGetCall(lon, lat, topK, _callback);

    }

    /**
     * Get soil type
     * Returns the most probable soil type for the given location
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param topK Number of most probable soil types that will be returned, sorted by probability in descending order (optional, default to 0)
     * @return SoilTypeJSON
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SoilTypeJSON getSoilType(BigDecimal lon, BigDecimal lat, Integer topK) throws ApiException {
        ApiResponse<SoilTypeJSON> localVarResp = getSoilTypeTypeGetWithHttpInfo(lon, lat, topK);
        return localVarResp.getData();
    }

    /**
     * Get soil type
     * Returns the most probable soil type for the given location
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param topK Number of most probable soil types that will be returned, sorted by probability in descending order (optional, default to 0)
     * @return ApiResponse&lt;SoilTypeJSON&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SoilTypeJSON> getSoilTypeTypeGetWithHttpInfo(BigDecimal lon, BigDecimal lat, Integer topK) throws ApiException {
        okhttp3.Call localVarCall = getSoilTypeTypeGetValidateBeforeCall(lon, lat, topK, null);
        Type localVarReturnType = new TypeToken<SoilTypeJSON>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get soil type (asynchronously)
     * Returns the most probable soil type for the given location
     * @param lon Longitude (required)
     * @param lat Latitude (required)
     * @param topK Number of most probable soil types that will be returned, sorted by probability in descending order (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoilTypeAsync(BigDecimal lon, BigDecimal lat, Integer topK, final ApiCallback<SoilTypeJSON> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSoilTypeTypeGetValidateBeforeCall(lon, lat, topK, _callback);
        Type localVarReturnType = new TypeToken<SoilTypeJSON>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
