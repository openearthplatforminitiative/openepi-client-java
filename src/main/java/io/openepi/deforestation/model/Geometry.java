/*
 * Deforestation API
 * This is a RESTful service that provides aggregated deforestation data over the period from 2001 to 2022 based on data provided by <a href=\"https://glad.umd.edu/\">Global Land Analysis and Discovery (GLAD)</a> laboratory at the University of Maryland, in partnership with <a href=\"https://www.globalforestwatch.org/\">Global Forest Watch (GFW)</a>. The data are freely available for use under a <a href=\"https://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution 4.0 International License</a>.<br/><i>Citation: Hansen, M. C., P. V. Potapov, R. Moore, M. Hancher, S. A. Turubanova, A. Tyukavina, D. Thau, S. V. Stehman, S. J. Goetz, T. R. Loveland, A. Kommareddy, A. Egorov, L. Chini, C. O. Justice, and J. R. G. Townshend. 2013. High-Resolution Global Maps of 21st-Century Forest Cover Change. Science 342 (15 November): 850-53. Data available on-line from: <a href=\"https://glad.earthengine.app/view/global-forest-change\">https://glad.earthengine.app/view/global-forest-change</a></i>.<br/><br/>The data provided by the `basin` endpoint are aggregated over river basin polygons provided by <a href=\"https://www.hydrosheds.org/products/hydrobasins\">HydroSHEDS</a>. The basin data are feely available for non-commercial and commercial use under a licence agreement included in the <a href=\"https://data.hydrosheds.org/file/technical-documentation/HydroSHEDS_TechDoc_v1_4.pdf\">HydroSHEDS Technical Documentation</a>.
 *
 * The version of the OpenAPI document: 0.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openepi.deforestation.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import io.openepi.deforestation.model.MultiPolygon;
import io.openepi.deforestation.model.Polygon;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import io.openepi.deforestation.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-24T13:55:50.527454+02:00[Europe/Oslo]", comments = "Generator version: 7.7.0")
public class Geometry extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Geometry.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Geometry.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Geometry' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Polygon> adapterPolygon = gson.getDelegateAdapter(this, TypeToken.get(Polygon.class));
            final TypeAdapter<MultiPolygon> adapterMultiPolygon = gson.getDelegateAdapter(this, TypeToken.get(MultiPolygon.class));

            return (TypeAdapter<T>) new TypeAdapter<Geometry>() {
                @Override
                public void write(JsonWriter out, Geometry value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Polygon`
                    if (value.getActualInstance() instanceof Polygon) {
                        JsonElement element = adapterPolygon.toJsonTree((Polygon)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MultiPolygon`
                    if (value.getActualInstance() instanceof MultiPolygon) {
                        JsonElement element = adapterMultiPolygon.toJsonTree((MultiPolygon)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: MultiPolygon, Polygon");
                }

                @Override
                public Geometry read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Polygon
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Polygon.validateJsonElement(jsonElement);
                        actualAdapter = adapterPolygon;
                        Geometry ret = new Geometry();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Polygon failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Polygon'", e);
                    }
                    // deserialize MultiPolygon
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MultiPolygon.validateJsonElement(jsonElement);
                        actualAdapter = adapterMultiPolygon;
                        Geometry ret = new Geometry();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MultiPolygon failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MultiPolygon'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for Geometry: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Geometry() {
        super("anyOf", Boolean.FALSE);
    }

    public Geometry(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Polygon", Polygon.class);
        schemas.put("MultiPolygon", MultiPolygon.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Geometry.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * MultiPolygon, Polygon
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Polygon) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MultiPolygon) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be MultiPolygon, Polygon");
    }

    /**
     * Get the actual instance, which can be the following:
     * MultiPolygon, Polygon
     *
     * @return The actual instance (MultiPolygon, Polygon)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Polygon`. If the actual instance is not `Polygon`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Polygon`
     * @throws ClassCastException if the instance is not `Polygon`
     */
    public Polygon getPolygon() throws ClassCastException {
        return (Polygon)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MultiPolygon`. If the actual instance is not `MultiPolygon`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MultiPolygon`
     * @throws ClassCastException if the instance is not `MultiPolygon`
     */
    public MultiPolygon getMultiPolygon() throws ClassCastException {
        return (MultiPolygon)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Geometry
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Polygon
        try {
            Polygon.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Polygon failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MultiPolygon
        try {
            MultiPolygon.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MultiPolygon failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for Geometry with anyOf schemas: MultiPolygon, Polygon. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of Geometry given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Geometry
     * @throws IOException if the JSON string is invalid with respect to Geometry
     */
    public static Geometry fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Geometry.class);
    }

    /**
     * Convert an instance of Geometry to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

